# -*- coding: utf-8 -*-

from django.shortcuts import render, redirect, render_to_response
from django.core.context_processors import csrf
from django.contrib.auth.decorators import login_required
from django.contrib.formtools.wizard.views import SessionWizardView
from app.models import FileList, ServerConf, NetworkConf
from app.forms import *
from app.serverforms import *
from app.cmd import LocalCommand, RemoteCommand
import subprocess
import traceback
import sys
import os
from io import StringIO


FORMS = [#('step00form', Step00Form),
         ('step01form', Step01Form),
         ('step02form', Step02Form),
         ('step03form', Step03Form),
         ('step04form', Step04Form),
         ('step05form', Step05Form),
         ('step06form', Step06Form),
         ('step07form', Step07Form),
         ('step08form', Step08Form),
         ('step09form', Step09Form),
         ('step10form', Step10Form),
         ('step11form', Step11Form),
         ('step12form', Step12Form),
         ('step13form', Step13Form),
         ('step14form', Step14Form),
         ('step15form', Step15Form),
         ('step16form', Step16Form),
         ('step17form', Step17Form),
         ('step18form', Step18Form),
         ('step19form', Step19Form),
         ('step20form', Step20Form),
         ('step21form', Step21Form),
         ('step22form', Step22Form),
         ('step23form', Step23Form),
         ('step24form', Step24Form),
         ('step25form', Step25Form),
         ('step26form', Step26Form),
         ('step27form', Step27Form),
         ('step28form', Step28Form),
         ('step29form', Step29Form),
         ('step30form', Step30Form),
         ('step31form', Step31Form),
         ('step32form', Step32Form),
         ('step33form', Step33Form),
         ('step34form', Step34Form),
         ('step35form', Step35Form),
         ('step36form', Step36Form)]


SERVER_FORMS = [
         ('step01FormServer', Step01FormServer),
         ('step02formServer', Step02FormServer),
         ('step03formServer', Step03FormServer),
         ('step04formServer', Step04FormServer),
         ('step05formServer', Step05FormServer),
         ('step06formServer', Step06FormServer),
         ('step07formServer', Step07FormServer),
         ('step08formServer', Step08FormServer),
         ('step09formServer', Step09FormServer),
         ('step10formServer', Step10FormServer),
         ('step11formServer', Step11FormServer),
         ('step12formServer', Step12FormServer),
         ('step13formServer', Step13FormServer),
         ('step14formServer', Step14FormServer)]



class ConfigWizard(SessionWizardView):

    template_name = 'app/wizard.html'

    def done(self, form_list, **kwargs):
        return render_to_response('app/wizard_done.html', {
            'form_data': [form.cleaned_data for form in form_list]})


config_wizard_view = ConfigWizard.as_view(FORMS)


@login_required()
def login_required_wizard(request):
        return config_wizard_view(request)


class ConfigServerWizard(SessionWizardView):

    template_name = 'app/server.html'

    def done(self, form_list, **kwargs):
        return render_to_response('app/server_wizard_done.html', {
            'form_data': [form.cleaned_data for form in form_list]})
        
        
config_server_view = ConfigServerWizard.as_view(SERVER_FORMS)

@login_required()
def config_server_wizard(request):
        return config_server_view(request)
    
@login_required()
def logout(request):

    request.session.flush()
    return render(request, 'app/logout.html', {'msg': 'Logout'})


@login_required()
def dashboard(request):

    server_list = list(ServerConf.objects.all())
    servers = {}
    msg = ''
    try:
        if request.session['msg']:
            msg = request.session['msg']
    except:
        pass
    rc = None
    try:
        nc_list = list(NetworkConf.objects.all())
        if len(nc_list) < 1:
            return redirect('/config/app/networkconf/add/')
    except:
        pass
    if len(server_list) < 1:
        return render(request, 'app/dashboard.html', {
            'msg': 'No servers on the server list'})
    for server in server_list:
        try:
            if server.password:
                rc = RemoteCommand(server.name, int(server.port),
                                   server.user, server.password)
                msg += '{}: password<br />'.format(server.name)
            else:
                rc = RemoteCommand(server.name, int(server.port), server.user)
                msg += '{}: keys<br />'.format(server.name)
            service_dict = {}
            for service in server.service_list.all():
                tmp = ''
                rc.service(service.name, 'status')
                err = rc.get_output()
                out = rc.get_error()
                if err or out:
                    tmp += out
                    tmp += err
                else:
                    tmp = 'Output/Error!'
                service_dict[service.name] = tmp
            servers[server] = service_dict
        except Exception as ex:
            msg += '{}: {}'.format(server.name, str(ex))
    return render(request, 'app/dashboard.html', {
        'servers': servers,
        'msg': msg})


@login_required()
def service(request, path_name):

    full_path = request.get_full_path()
    server_name = full_path.split('/service/')[1].split('/')[0]
    service_name = full_path.split('/service/')[1].split('/')[1]
    cmd = full_path.split('/service/')[1].split('/')[2]
    server = ServerConf.objects.get(name=server_name)
    msg = ''
    rc = None
    try:
        if server.password:
            rc = RemoteCommand(server.name, int(server.port),
                               server.user, server.password)
            msg += '{}: password<br />'.format(server.name)
        else:
            rc = RemoteCommand(server.name, int(server.port),
                               server.user)
            msg += '{}: keys<br />'.format(server.name)
    except Exception as ex:
        msg += '{}: {}'.format(server.name, str(ex))
    rc.service(service_name, cmd)
    # sprawdzenie czy plik istnieje w konfiguracji serwera !!!
    if rc.get_error():
        msg += '{}: {}<br />'.format(server.name, rc.get_output())
    else:
        msg += '{}: {}<br />'.format(server.name, rc.get_error())
    for service in server.service_list.all():
        rc.service(service.name, 'status')
        service.status = rc.get_error()
        service.status += rc.get_output()
    request.session['msg'] = msg
    return redirect('/dashboard/')


@login_required()
def file(request, path_name):

    msg = ''
    if len(request.get_full_path().split('/file/')[1].split('/')) < 3:
        msg += 'File does not exist.'
        return render(request, 'app/dashboard.html', {'msg': msg})
    server_name = request.get_full_path().split('/file/')[1].split('/')[0]
    server = ServerConf.objects.get(name=server_name)
    path = request.get_full_path().split(server_name)[1][:-1]
    msg = ''
    formd = None
    data = ''
    rc = None
    try:
        if server.password:
            rc = RemoteCommand(server.name, int(server.port),
                               server.user, server.password)
            msg += '{}: password<br />'.format(server.name)
        else:
            rc = RemoteCommand(server.name, int(server.port), server.user)
            msg += '{}: keys<br />'.format(server.name)
        rc.read(path)
        data = rc.get_output()
        print(data)
        tmp = request.POST.get('form2edit')
        if data != tmp and tmp is not None:
            data = tmp
            if str(data)[-2:] != '\r\n':
                data += '\r\n'
            rc.write(data, path)
            msg += '{}: {} saved.'.format(server.name, path)
        # sprawdzenie czy plik istnieje w konfiguracji serwera !!!
    except Exception as ex:
        msg += '{}: {}'.format(server.name, str(ex))
    formd = EditorForm(initial={'form2edit': data})
    return render(request, 'app/file.html', {'formd': formd,
                  'server': server, 'path': path, 'msg': msg})


@login_required()
def script(request, path_name):

    server_name = request.get_full_path().split('/script/')[1].split('/')[0]
    server = ServerConf.objects.get(name=server_name)
    path = request.get_full_path().split(server_name)[1][:-1]
    msg = ''
    formd = None
    data = ''
    rc = None
    output = ''
    try:
        if server.password:
            rc = RemoteCommand(server.name, int(server.port),
                               server.user, server.password)
            msg += '{}: password<br />'.format(server.name)
        else:
            rc = RemoteCommand(server.name, int(server.port), server.user)
            msg += '{}: keys<br />'.format(server.name)
        rc.read(path)
        data = rc.get_output()
        print(data)
        tmp = request.POST.get('form2edit')
        if data != tmp and tmp is not None:
            data = tmp
            rc.write(data, path)
            rc.exec_cmd(path)
            output = rc.get_error()
            output += rc.get_output()
            msg += '{}: {} saved & run.'.format(server.name, path)
        # sprawdzenie czy plik istnieje w konfiguracji serwera !!!
    except Exception as ex:
        msg += '{}: {}'.format(server.name, str(ex))
    formd = EditorForm(initial={'form2edit': data})
    return render(request, 'app/script.html',
                  {'formd': formd, 'server': server, 'path': path,
                   'msg': msg, 'output': output})



    