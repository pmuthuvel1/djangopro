#!/bin/bash
#
# Copyright (C) 2010-2013 Doug Burks and Security Onion
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License Version 2 as
# published by the Free Software Foundation.  You may not use, modify or
# distribute this program under any other version of the GNU General
# Public License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#
# Description:
# Configure Security Onion.
#
# Version:
# 20121116
#
# Changelog:
# 20111116 - Set OSSEC timezone to match OS timezone
#
# 20111222 - Start Snorby
#
# 20120106 - If configuring server, make sure MySQL is started
#        If this box was previously a slave, we need to remove securityonion_ssh.conf
#
# 20120113 - Configure Bro
#
# 20120119 - Update threshold config in suricata.yaml
#        Update PulledPork URLs
#
# 20120123 - If only one interface, configure Bro for standalone
#
# 20120124 - ossec_agent is now integrated into NSM scripts
#
# 20120229 - Run Snorby in production mode
#        Add "mon" to list of valid interface types
#
# 20120312 - New Snorby packages
#
# 20120412 - Issue 226: Rename bro workers
# http://code.google.com/p/security-onion/issues/detail?id=226
#
# 20120425 - Fix the following issues:
# Modify Setup script so that IDS Engine choice is a list instead of Yes or No default:
# http://code.google.com/p/security-onion/issues/detail?id=155
# Setup needs to delete /var/www/squert/.scripts/Ip2c/*.md5 before running ip2c.tcl:
# http://code.google.com/p/security-onion/issues/detail?id=250
# Update Setup to allow running multiple times in sensor-->server config:
# http://code.google.com/p/security-onion/issues/detail?id=256
# Setup should create snort.stats if user chooses Suricata:
# http://code.google.com/p/security-onion/issues/detail?id=257
#
# 20120508 - Fix the following issues:
# Issue 239: autossh should use OpenSSH ServerAliveInterval and ServerAliveCountMax options
# http://code.google.com/p/security-onion/issues/detail?id=239
#
# 20120910 - Numerous fixes for BDR
# 20121116 - /etc/network/interfaces configuration by Matt Gregory

#########################################
# Variables
#########################################
DEBUG="1"
# Window title
HOSTNAME=`hostname`
TITLE="CyberDefence Setup ($HOSTNAME)"
# File locations
CONF="/etc/nsm/securityonion.conf"
LOG="/tmp/sosetup.log"
PP_CONF="/etc/nsm/pulledpork/pulledpork.conf"
# URLs
ET_URL="rules.emergingthreats.net"
VRT_URL="www.snort.org"
# Provide sensible defaults for Quick Setup
SGUIL_SERVER_NAME="securityonion"
#IDS_ENGINE="snort"
IDS_ENGINE="suricata"
IDS_RULESET="ETGPL"
INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | awk '{print $1}' | cut -d\: -f1 |sort`
NUM_INTERFACES=`echo $INTERFACES | wc -w`
SENSORTAB="/etc/nsm/sensortab"
UPDATE_ELSA_SERVER="NO"
# PCAP_OPTIONS are passed to netsniff-ng
# "netsniff-ng -c" does the following:
#   -c|--clrw                      Use slower read(2)/write(2) I/O
# we set this as the default for classroom/training users
# who are monitoring low-bandwidth networks and don't
# want to wait for scatter/gather mode to write pcaps.
# Users running Advanced Setup are likely on production networks
# with higher bandwidth and want better performance, so we clear
# PCAP_OPTIONS in the Advanced Setup section.
PCAP_OPTIONS="-c"
# PCAP_SIZE is the size at which we rotate to a new pcap file
# Default to 150MB, but user can choose if running Advanced Setup
PCAP_SIZE=150
# PCAP_RING_SIZE is the RX_RING size for buffering packets
# Default is 64MB
PCAP_RING_SIZE="64"
# WARN_DISK_USAGE is the percentage of disk usage at which the NSM scripts warn the disk is getting full
WARN_DISK_USAGE=80
# CRIT_DISK_USAGE is the percentage of disk usage at which the NSM scripts begin purging old files
CRIT_DISK_USAGE=90
# CORES is the number of CPU cores in the box
# This is used for limiting IDS_LB_PROCS and BRO_LB_PROCS
CORES=`grep -c ^processor /proc/cpuinfo`
# IDS_LB_PROCS goes into sensor.conf and controls threads for Snort/Suricata
IDS_LB_PROCS=1
IDS_LB_PROCS_CONFIRM="- Run a single IDS process per interface.\n"
# BRO_LB_PROCS goes into Bro's node.cfg and controls threads for Bro
BRO_LB_PROCS=1
BRO_LB_PROCS_CONFIRM="- Run a single Bro process per interface.\n"
# /etc/nsm/securityonion.conf services enabled by default
BRO_ENABLED="yes"
SURICATA_ENABLED="yes"
OSSEC_AGENT_ENABLED="yes"
# /etc/nsm/HOSTNAME-INTERFACE/sensor.conf services enabled by default
PCAP_ENABLED="yes"
PCAP_AGENT_ENABLED="yes"
SNORT_AGENT_ENABLED="yes"
IDS_ENGINE_ENABLED="yes"
BARNYARD2_ENABLED="yes"
PRADS_ENABLED="yes"
SANCP_AGENT_ENABLED="yes"
PADS_AGENT_ENABLED="yes"
ARGUS_ENABLED="yes"
HTTP_AGENT_ENABLED="yes"
LOGSTASH_SERVER="yes"
LOGSTASH_CONF_PATH="/etc/logstash/conf.d"
LOGSTASH_CONF_FILE="logstash.conf"
LOGSTASH_SENSOR_CONF_FILE="logstash-sensor.conf"
LOGSTASH_REDIS_PORT="5043"
REDIS_CONF_FILE="redis.conf"
REDIS_CONF_PATH="/etc/redis"
REDIS_START_FILE="redis-server"
# for upstart job
REDIS_UPSTART_CONF_FILE="redis-server.conf"
ELASTICSEARCH_SERVER="yes"
ELASTICSEARCH_CONF_PATH="/etc/elasticsearch"
ELASTICSEARCH_CONF_FILE="elasticsearch.yml"
ELASTICSEARCH_NODE_CONF_FILE="elasticsearch-node.yml"
ELASTICSEARCH_NODE_CONF_PATH="/etc/elasticsearch"
ELASTICSEARCH_DEFAULT_CONF_FILE="elasticsearch"
ELASTICSEARCH_DEFAULT_CONF_PATH="/etc/default"


# Salt is disabled by default, as it's really only needed when you have more than 5 or 10 sensors
SALT="NO"
# Number of days to keep in Sguil database
DAYSTOKEEP=30
# Number of days to repair
DAYSTOREPAIR=7
# File extraction
EXTRACT_FILES="yes"
# PF_RING min_num_slots
PF_RING_SLOTS="4096"

#########################################
# Debug
#########################################
[ $DEBUG -eq 1 ] && echo "DEBUG: Debug is enabled.  To disable it, edit the script and change DEBUG to 0."

#########################################
# Got r00t?
#########################################
if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo "Setup needs to be run as root.  Please try again using sudo."
    #@! zenity --error --text="Setup needs to be run as root.  Please try again using sudo."
    exit
fi

#########################################
# Welcome screen
#########################################
TEXT="Welcome to Cyber Defence Setup!\n\
\n\
This program will allow you to configure Cyber Defence on $HOSTNAME.\n\
\n\
Would you like to continue?"
YES="Yes, Continue!"
NO="No, Quit."
#@! zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
ANSWER="$1" #@!~
if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
        exit
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
fi

#########################################
# sosetup-network
#########################################
[ -f /usr/bin/sosetup-network ] && /usr/bin/sosetup-network
ANSWER="$?"
# If there were errors in sosetup-network, then exit
[ $ANSWER -eq 1 ] && exit

ADVANCED_SETUP="1"
if [ $ADVANCED_SETUP -eq 0 ]; then
    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes. Performing Quick Setup."

#   if [ $NUM_INTERFACES -gt 1 ]; then
#           TEXT="Which network interface should be monitored?"
#           INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | awk '{print $1}' | cut -d\: -f1 | sort |zenity --list --column="Interface" --hide-header --title="$TITLE" --text="$TEXT" 2>/dev/null`
#           if [ "$INTERFACES" = "" ]
#           then
#                   [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
#                   exit
#           fi
#   fi

        if [ $NUM_INTERFACES -gt 1 ]; then
                TEXT="Which network interface should be monitored?\n\nIf you allowed Setup to configure /etc/network/interfaces, your first monitor interface is already selected."
                INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | awk '{print $1}' | cut -d\: -f1 | sort`
                if grep "Security Onion" /etc/network/interfaces >/dev/null 2>&1 && grep manual /etc/network/interfaces >/dev/null 2>&1; then
                        CONFIGURED_INTERFACES=`awk '/manual/ {print $2}' /etc/network/interfaces | head -1`
                        INPUT=`for i in $INTERFACES; do
                                        if echo $CONFIGURED_INTERFACES |grep $i >/dev/null 2>&1; then
                                                echo -n "TRUE $i "
                                        else
                                                echo -n "FALSE $i "
                                        fi
                                done`
                else
                        INPUT=`for i in $INTERFACES; do echo -n "FALSE $i "; done`
                fi
                INTERFACES=`zenity --list --radiolist --column "Enabled" --column "Interface" --hide-header --title="$TITLE" --text="$TEXT" $INPUT |sed 's/|/ /g'`
                if [ "$INTERFACES" = "" ]; then
                        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
                        exit
                fi
                [ $DEBUG -eq 1 ] &&  echo "DEBUG: Selected interfaces $INTERFACES."
        fi

    SERVER=1
    SENSOR=1
        ELSA="NO"
    ES_NODE=0
    SERVERNAME="localhost"
    SENSOR_CONFIRM_1="- Configure Suricata and Bro to monitor the following interface:\n"
    SENSOR_CONFIRM_2="$INTERFACES\n"
    # LOGSTASH & SURICATA
    LOGSTASH_REDIS_PORT="5043"
    LOGSTASH_REDIS_CONFIRM="- Port for receiving logs on REDIS: $LOGSTASH_REDIS_PORT\n";
else
    [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No. Performing Advanced Setup."
    # Ask which components to configure
    TEXT="If this is the first machine in a distributed deployment, choose Server.\n\
This machine will only run Sguil, Squert, Snorby, and Elasticsearch and will not monitor any network interfaces.\n\
\n\
If this is a sensor for a distributed deployment (you've already installed the Server), choose Sensor.\n\
You will need to be able to SSH to the existing Server box with an account with sudo privileges.\n\
\n\
Otherwise, choose Standalone to configure both Server and Sensor components on this box."
    #@! COMPONENTS=`zenity --height=300 --list --radiolist --column="1" --column="2" --hide-header --title="$TITLE" --text="$TEXT" FALSE Server FALSE Sensor FALSE Standalone FALSE IndexNode`
    COMPONENTS="$2" #@!~
    case $COMPONENTS in
        Standalone)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Standalone"
        SERVER=1
        SENSOR=1
        ES_NODE=0
        SERVERNAME="localhost"
        ;;
        IndexNode)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked ES Node."
                ES_NODE=1
                SENSOR=0
        SERVER=0
                SERVERNAME="localhost"
                ;;

    Server)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Server."
        SERVER=1
        ES_NODE=0
        SENSOR=0
        SERVERNAME="localhost"
        ;;
    Sensor)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Sensor."
        SERVER=0
        ES_NODE=0
        SENSOR=1
        TEXT="What is the hostname or IP address of the Sguil server that this sensor should connect to?"
        #@! SERVERNAME=`zenity --title="$TITLE" --text="$TEXT" --entry`
        SERVERNAME="$3" #@!~
        [ x$SERVERNAME = "x" ] && exit
        TEXT="Please enter a username that can SSH to the Sguil server and execute sudo."
        #@! SSH_USERNAME=`zenity --title="$TITLE" --text="$TEXT" --entry`
        SSH_USERNAME="$4" #@!~
        [ x$SSH_USERNAME = "x" ] && exit
        SENSOR_CONFIRM_3="- Configure the sensors to report to $SERVERNAME.\n"
        ;;
    *)
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
                exit
                ;;
        esac
fi
#########################################
# ON ALL INSTANCES SET IP MGMT
#########################################
IP_MGMT=`ifconfig | awk '/eth0/{getline; print $2}'| sed -e s'/addr://'g`

#########################################
# If server is enabled, prompt for username/password
#########################################
if [ $SERVER -eq 1 ]; then

    # Ask for Sguil client username
    SGUIL_CLIENT_USERNAME="$5" #@!~
#    USERNAME_CONFIRMED="no"
#    while [ $USERNAME_CONFIRMED = "no" ]; do
#        TEXT="What would you like your Sguil username to be?\r\rThis will be
#        used when logging into Sguil, Squert.\r\rPlease use alphanumeric
#        characters only."
#        SGUIL_CLIENT_USERNAME=`zenity --title="$TITLE" --text="$TEXT" --entry`
#        [ x$SGUIL_CLIENT_USERNAME = "x" ] && exit
#        COMPRESSED="$(echo $SGUIL_CLIENT_USERNAME | sed -e 's/[^[:alnum:]]//g')"
#        if [ "$COMPRESSED" != "$SGUIL_CLIENT_USERNAME" ] ; then
#                zenity --error --text="Invalid username\! \r \
#\r \
#Please use alphanumeric characters only."
#        else
#                USERNAME_CONFIRMED="yes"
#        fi
#    done

    SNORBY_EMAIL="$6" #@!~
#    # Ask for email address for Snorby
#    EMAIL_CONFIRMED="no"
#    while [ $EMAIL_CONFIRMED = "no" ]; do
#        #@! TEXT="What is your email address?\r\rThis will be used when logging into Snorby."
#        #@! SNORBY_EMAIL=`zenity --title="$TITLE" --text="$TEXT" --entry`
#        [ x$SNORBY_EMAIL = "x" ] && exit
#        if [[ "$SNORBY_EMAIL" != *?"@"?*.?* ]] ; then
#            zenity --error --text="Invalid email address\! \r \
#\r \
#Please ensure your email address is of the form: \r \
#user@example.com"
#        else
#            EMAIL_CONFIRMED="yes"
#        fi
#    done

    SGUIL_CLIENT_PASSWORD_1="$7" #@!~
    SGUIL_CLIENT_PASSWORD_2="$7" #@!~
#    # Ask for and confirm Sguil client password
#    SGUIL_CLIENT_PASSWORD_CONFIRMED="no"
#    while [ $SGUIL_CLIENT_PASSWORD_CONFIRMED = "no" ]; do
#        TEXT="What would you like to set your password to?\n\
#\n\
#Password must be at least 6 characters.  Please use alphanumeric characters only!\n\
#\n\
#This password will be used for Sguil, Squert, Snorby.\n\
#\n\
#Once you've logged into these interfaces using this initial password, you can change it in Sguil and Snorby."
#        SGUIL_CLIENT_PASSWORD_1=`zenity --title="$TITLE" --text="$TEXT" --entry --hide-text`
#        [ "x$SGUIL_CLIENT_PASSWORD_1" = "x" ] && exit
#            if [ "${#SGUIL_CLIENT_PASSWORD_1}" -lt "6" ]; then
#            zenity --error --text="Password must be at least 6 characters\!"
#        else
#            COMPRESSED="$(echo $SGUIL_CLIENT_PASSWORD_1 | sed -e 's/[^[:alnum:]]//g')"
#                    if [ "$COMPRESSED" != "$SGUIL_CLIENT_PASSWORD_1" ] ; then
#                            zenity --error --text="Invalid password\! \r \
#\r \
#Please use alphanumeric characters only."
#            else
#                TEXT="Please confirm what you would like to set your password to."
#                SGUIL_CLIENT_PASSWORD_2=`zenity --title="$TITLE" --text="$TEXT" --entry --hide-text`
#                [ "x$SGUIL_CLIENT_PASSWORD_2" = "x" ] && exit
#                if [ "$SGUIL_CLIENT_PASSWORD_1" = "$SGUIL_CLIENT_PASSWORD_2" ]; then
#                    SGUIL_CLIENT_PASSWORD_CONFIRMED="yes"
#                else
#                        zenity --error --text="Passwords didn't match\!"
#                fi
#            fi
#        fi
#    done
    SERVER_CONFIRM="- Create a Sguil server named $SGUIL_SERVER_NAME. \n"
    SERVER_USER_CONFIRM="- Create a Sguil user named $SGUIL_CLIENT_USERNAME. \n"
    SNORBY_USER_CONFIRM="- Create a Snorby user named $SNORBY_EMAIL. \n"
fi
#########################################
# ADVANCED SETUP - ES NODE
#########################################
if [ $ADVANCED_SETUP -eq 1 ] && [ $ES_NODE -eq 1 ]; then
    MEMORY_AVAILABLE=`free -g| grep "Mem:" | awk {'print $2'}`
        MAX_ES_MEMORY=$(( $MEMORY_AVAILABLE - 1 ))
        HALF_ES_MEMORY_TMP=$(( $MAX_ES_MEMORY / 2 ))
        HALF_ES_MEMORY=`printf  "%.0f" $HALF_ES_MEMORY_TMP`

    NODE_NAME=`hostname`
        ES_MEMORY_CONFIRMED="no"

        ES_MEMORY_CONFIRMED="yes"
        ES_MEMORY="$8" #@!~
        ES_NODE_CONFIRM="We will install index node on this server\n Index node will use: $ES_MEMORY G memory\n"
#        while [ $ES_MEMORY_CONFIRMED = "no" ]; do
#                ES_MEMORY=`zenity --entry --title "$TITLE" --text="Please set up memory in GB for index node - on this server you have free ~ $MAX_ES_MEMORY. Half of this value is deafult" --entry-text=$HALF_ES_MEMORY`
#                [ x$ES_MEMORY = "x" ] && exit
#
#        [[ $ES_MEMORY =~ ^[0-9]+$ ]] &&
#                [ $ES_MEMORY -lt $MAX_ES_MEMORY ] &&
#                ES_MEMORY_CONFIRMED="yes" ||
#                zenity --error --text "Invalid memory! Please use integers less than $MAX_ES_MEMORY."
#        done
#
#    ES_NODE_CONFIRM="We will install index node on this server\n Index node will use: $ES_MEMORY G memory\n"
fi


#########################################
# ADVANCED SETUP - SERVER
#########################################
if [ $ADVANCED_SETUP -eq 1 ] && [ $SERVER -eq 1 ]; then

    # Ask for DAYSTOKEEP
    DAYSTOKEEP_CONFIRMED="no"
    DAYSTOKEEP="$9" #@!~
#    while [ $DAYSTOKEEP_CONFIRMED = "no" ]; do
#        DAYSTOKEEP=`zenity --entry --title "$TITLE" --text="How many days of data do you want to keep in your Sguil database?\n\nThis includes things like IDS alerts.\n\nIf you need to change this later, you can change DAYSTOKEEP in /etc/nsm/securityonion.conf.\n\nPlease enter an integer.  The default is 30 days." --entry-text=30`
#        [ x$DAYSTOKEEP = "x" ] && exit
#        COMPRESSED="$(echo $DAYSTOKEEP | sed -e 's/[^[:digit:]]//g')"
#        if [ "$COMPRESSED" != "$DAYSTOKEEP" ]; then
#            zenity --error --text "Invalid value! Please use integers only."
#        else
#            DAYSTOKEEP_CONFIRMED="yes"
#        fi
#    done

    DAYSTOREPAIR="$10" #@!~
#    # Ask for DAYSTOREPAIR
#    DAYSTOREPAIR_CONFIRMED="no"
#    while [ $DAYSTOREPAIR_CONFIRMED = "no" ]; do
#        DAYSTOREPAIR=`zenity --entry --title "$TITLE" --text="How many days of data do you want to repair in your Sguil database?\n\nA daily cronjob stops Sguil, repairs the MySQL tables for the last X days, and then starts Sguil back up.\n\nIf you choose a higher value, Sguil will be down for longer.\n\nIf you need to change this later, you can change DAYSTOREPAIR in /etc/nsm/securityonion.conf.\n\nPlease enter an integer.  The default is 7 days." --entry-text=7`
#        [ x$DAYSTOREPAIR = "x" ] && exit
#        COMPRESSED="$(echo $DAYSTOREPAIR | sed -e 's/[^[:digit:]]//g')"
#        if [ "$COMPRESSED" != "$DAYSTOREPAIR" ]; then
#            zenity --error --text "Invalid value! Please use integers only."
#        else
#            DAYSTOREPAIR_CONFIRMED="yes"
#        fi
#    done

    IDS_ENGINE="$11" #@!~
#    # Ask which IDS engine to use.
#    TEXT="Suricata IDS Engine is only choise for now"
#    IDS_ENGINE=`zenity --list --radiolist --column="1" --column="2" --hide-header --title="$TITLE" --text="$TEXT" FALSE Suricata`
#    [ -z $IDS_ENGINE ] && exit
#        [ $DEBUG -eq 1 ] && echo "DEBUG: User selected $IDS_ENGINE."

    IDS_RULESET="$12" #@!~
#    # Ask which IDS ruleset to use.
#    TEXT="Which IDS ruleset would you like to use?"
#    IDS_RULESET=`zenity --width=600 --height=300 --list --radiolist --column="1" --column="Ruleset" --column="Ruleset" --column="Oinkcode required?" --hide-header --hide-column="2" --text="$TEXT" --title="$TITLE" \
#    FALSE "ETGPL" "Emerging Threats GPL"  "no oinkcode required" \
#    FALSE "ETPRO" "Emerging Threats PRO" "requires ETPRO oinkcode" \
#    FALSE "VRTET" "Snort VRT ruleset and Emerging Threats NoGPL ruleset" "requires Snort VRT oinkcode" \
#    FALSE "VRT" "Snort VRT ruleset only and set a VRT policy" "requires Snort VRT oinkcode" `

    case $IDS_RULESET in
    ETGPL)
        [ $DEBUG -eq 1 ] &&  echo "DEBUG: Selecting Emerging Threats GPL ruleset."
        IDS_RULESET_ACTION="- Download Emerging Threats GPL ruleset.\n"
        ;;
    ETPRO)
        [ $DEBUG -eq 1 ] && echo "DEBUG: Selecting ETPRO ruleset."
        # TEXT="Please enter your Emerging Threats Pro oinkcode.\n\nIf you don't already have one, you can purchase one from http://www.emergingthreatspro.com/."
        # OINKCODE=`zenity --entry --title="Emerging Threats Pro Oinkcode" --text="$TEXT"`
        OINKCODE="$13" #@!~
        [ $DEBUG -eq 1 ] && echo "DEBUG: Entered ETPRO oinkcode $OINKCODE"
        IDS_RULESET_ACTION="- Download ETPRO ruleset using oinkcode $OINKCODE.\n"
        ;;
    VRT)
        [ $DEBUG -eq 1 ] && echo "DEBUG: Selecting Snort VRT ruleset only and setting a VRT policy."
        # TEXT="Please enter your Snort VRT oinkcode.\n\nIf you don't already have one, you can obtain one from http://www.snort.org/."
        # OINKCODE=`zenity --entry --title="Snort VRT Oinkcode" --text="$TEXT"`
        OINKCODE="$14" #@!~
        [ $DEBUG -eq 1 ] && echo "DEBUG: Entered Snort VRT oinkcode $OINKCODE"
        VRT_POLICY="$15" #@!~
        # VRT_POLICY=`zenity --list --column="VRT Policy" --text="Please choose a VRT policy." --title="VRT Policy" \
        # "connectivity" \
        # "balanced" \
        # "security" `
        [ $DEBUG -eq 1 ] && echo "DEBUG: Selected Snort VRT policy $VRT_POLICY"
        IDS_RULESET_ACTION="- Download the Snort VRT ruleset using oinkcode $OINKCODE.\n- Set VRT policy to $VRT_POLICY.\n"
        ;;
    VRTET)
        [ $DEBUG -eq 1 ] && echo "DEBUG: Selecting Snort VRT and Emerging Threats NoGPL ruleset."
        # TEXT="Please enter your Snort VRT oinkcode.\n\nIf you don't already have one, you can obtain one from http://www.snort.org/."
        # OINKCODE=`zenity --entry --title="Snort VRT Oinkcode" --text="$TEXT"`
        OINKCODE="$14" #@!~
        [ $DEBUG -eq 1 ] && echo "DEBUG: Entered Snort VRT oinkcode $OINKCODE"
        IDS_RULESET_ACTION="- Download the Snort VRT ruleset using oinkcode $OINKCODE.\n- Download the Emerging Threats NoGPL ruleset.\n"
        ;;
    *)
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
        exit
        ;;
    esac

    # LOGSTASH
    LOGSTASH_REDIS="no";
    LOGSTASH_REDIS_PORT_TEMP="$16" #@!~
    LOGSTASH_REDIS_PORT="$16" #@!~
    LOGSTASH_REDIS="yes"
    LOGSTASH_REDIS_CONFIRM="- Port for receiving logs to Redis: $LOGSTASH_REDIS_PORT\n";
#    if [ $LOGSTASH_SERVER = "yes" ]; then
#    while [ $LOGSTASH_REDIS = "no" ]; do
#                LOGSTASH_REDIS_PORT_TEMP=`zenity --entry --title "$TITLE"
#                --text="Please specificity on which server will receive logs
#                stream from Sensor.\n\n The default is 5043 tcp port."
#                --entry-text=5043`I
#        echo $LOGSTASH_REDIS_PORT_TEMP > /tmp/test1
#                [ x$LOGSTASH_REDIS_PORT_TEMP = "x" ] && exit
#                LOGSTASH_REDIS_PORT="$(echo $LOGSTASH_REDIS_PORT_TEMP | sed -e 's/^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$//g')"
#                if [ "$LOGSTASH_REDIS_PORT" != "$LOGSTASH_REDIS_PORT_TEMP" ]; then
#                        zenity --error --text "Invalid value! Please use range: 1-65535 only."
#                else
#                        LOGSTASH_REDIS="yes"
#                        LOGSTASH_REDIS_CONFIRM="- Port for receiving logs to Redis: $LOGSTASH_REDIS_PORT\n";
#                fi
#        done
#    fi
        ES_MEMORY_CONFIRMED="no"
        MEMORY_AVAILABLE=`free -g| grep "Mem:" | awk {'print $2'}`
        MAX_ES_MEMORY=$(( $MEMORY_AVAILABLE - 1 ))
        HALF_ES_MEMORY_TMP=$(( $MAX_ES_MEMORY / 2 ))
        HALF_ES_MEMORY=`printf  "%.0f" $HALF_ES_MEMORY_TMP`

        ES_MEMORY="$17" #@!~
        ELASTICSEARCH_IP_SET="yes"
        ELASTICSEARCH_IP_CONFIRM="- IP for Elasticsearch: $ELASTICSEARCH_IP\n";
#        while [ $ES_MEMORY_CONFIRMED = "no" ]; do
#                ES_MEMORY=`zenity --entry --title "$TITLE" --text="Please set up memory in GB for elasticsearch node - on this server you have free ~ $MAX_ES_MEMORY. Half of this value is deafult" --entry-text=$HALF_ES_MEMORY`
#                [ x$ES_MEMORY = "x" ] && exit
#
#                [[ $ES_MEMORY =~ ^[0-9]+$ ]] &&
#                [ $ES_MEMORY -lt $MAX_ES_MEMORY ] &&
#                ES_MEMORY_CONFIRMED="yes" ||
#                zenity --error --text "Invalid memory! Please use integers less than $MAX_ES_MEMORY."
#        done

        ES_NODE_CONFIRM="We will install index node on this server\n Index node will use: $ES_MEMORY G memory\n"
    # LOGSTASH
#        ELASTICSEARCH_IP_SET="no";
#        if [ $ELASTICSEARCH_SERVER = "yes" ]; then
#   INTERFACE_MGMT=`awk '/Management network interface/{getline; print $2}'  /etc/network/interfaces`
#   IP_MGMT=`ifconfig | awk '/eth0/{getline; print $2}'| sed -e s'/addr://'g`
#
#        while [ $ELASTICSEARCH_IP_SET = "no" ]; do
#                ELASTICSEARCH_IP_TEMP=`zenity --entry --title "$TITLE" --text="Please specificity IP for Elasticsearch. It will be use for reciving event from logstash and cluster communication\n\n The default is MGMT IP." --entry-text=$IP_MGMT`
#                [ x$ELASTICSEARCH_IP_TEMP = "x" ] && exit
#                ELASTICSEARCH_IP="$(echo $ELASTICSEARCH_IP_TEMP | sed -e 's/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$//g')"
#                if [ "$ELASTICSEARCH_IP" != "$ELASTICSEARCH_IP_TEMP" ]; then
#                        zenity --error --text "Invalid value! Please use valid IP for example: 192.168.1.1"
#                else
#                        ELASTICSEARCH_IP_SET="yes"
#                        ELASTICSEARCH_IP_CONFIRM="- IP for Elasticsearch: $ELASTICSEARCH_IP\n";
#                fi
#        done
#        fi
#
#   # End of ADVANCED SETUP - SERVER
fi

#########################################
# ADVANCED SETUP - SENSOR
#########################################
if [ $ADVANCED_SETUP -eq 1 ] && [ $SENSOR -eq 1 ]; then

    # Remove "-c" from PCAP_OPTIONS for better performance on production networks
    PCAP_OPTIONS=""

    PF_RING_SLOTS="$18" #@!~
#    # Ask for PF_RING_SLOTS
#    PF_RING_SLOTS_CONFIRMED="no"
#    while [ $PF_RING_SLOTS_CONFIRMED = "no" ]; do
#        PF_RING_SLOTS=`zenity --entry --title "$TITLE" --text="What would you like to set PF__RING min__num__slots to?\n\nThe default is 4096.  For busy networks, you may want to increase this to a higher number like 65534.\n\nIf you need to change this later, you can modify /etc/modprobe.d/pf__ring.conf and reload the pf_ring module." --entry-text=4096`
#        [ x$PF_RING_SLOTS = "x" ] && exit
#        COMPRESSED="$(echo $PF_RING_SLOTS | sed -e 's/[^[:digit:]]//g')"
#        if [ "$COMPRESSED" != "$PF_RING_SLOTS" ]; then
#            zenity --error --text "Invalid value! Please use integers only."
#        else
#            PF_RING_SLOTS_CONFIRMED="yes"
#        fi
#    done

    INTERFACES="$19" #@!~
#    # Ask which interface(s) to listen on
#        if [ $NUM_INTERFACES -gt 1 ]; then
#        TEXT="Which network interface(s) should be monitored?\n\nIf you allowed Setup to configure /etc/network/interfaces, your monitor interfaces are already selected."
#        INTERFACES=`cat "/proc/net/dev" | egrep "(eth|bond|wlan|br|ath|bge|mon|fe)[0-9]+" | awk '{print $1}' | cut -d\: -f1 | sort`
#        if grep "Security Onion" /etc/network/interfaces >/dev/null 2>&1 && grep manual /etc/network/interfaces >/dev/null 2>&1; then
#            CONFIGURED_INTERFACES=`awk '/manual/ {print $2}' /etc/network/interfaces`
#            INPUT=`for i in $INTERFACES; do
#                    if echo $CONFIGURED_INTERFACES |grep $i >/dev/null 2>&1; then
#                        echo -n "TRUE $i "
#                    else
#                        echo -n "FALSE $i "
#                    fi
#                done`
#        else
#            INPUT=`for i in $INTERFACES; do echo -n "FALSE $i "; done`
#        fi
#        INTERFACES=`zenity --list --checklist --column "Enabled" --column "Interface" --hide-header --title="$TITLE" --text="$TEXT" $INPUT |sed 's/|/ /g'`
#        if [ "$INTERFACES" = "" ]; then
#                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
#                exit
#        fi
#        [ $DEBUG -eq 1 ] &&  echo "DEBUG: Selected interfaces $INTERFACES."
#    fi
    SENSOR_CONFIRM_1="- Monitor each of the following interfaces:\n"
    SENSOR_CONFIRM_2="$INTERFACES\n"

    # Determine number of cores and use that as a maximum value for IDS/Bro processes to run
    LIST=`seq 1 $CORES`; SELECTIONS=`for i in $LIST; do echo "FALSE $i"; done`

    # IDS Engine
    ANSWER="$20" #@!~
#    TEXT="The IDS Engine (Snort/Suricata) listens on the interfaces\n\
#specified on the previous screen and logs IDS alerts.\n\
#\n\
#Would you like to enable the IDS Engine?"
#    YES="Yes, enable the IDS Engine!"
#    NO="No, disable the IDS Engine."
#    zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
#    ANSWER="$?"
    if [ $ANSWER -eq 1 ]; then
            [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
        IDS_ENGINE_ENABLED="no"
        BARNYARD2_ENABLED="no"
        SNORT_AGENT_ENABLED="no"
    else
            [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
    fi

    # IDS Engine Procs
    if [ "$IDS_ENGINE_ENABLED" == "yes" ] && [ "$CORES" -gt 1 ]; then
#        TEXT="How many IDS engine processes would you like to run?\n\
#\n\
#This is limited by the number of CPU cores on your system.\n\
#\n\
#If you need to change this setting later, change IDS_LB_PROCS in /etc/nsm/HOSTNAME-INTERFACE/sensor.conf"
#        IDS_LB_PROCS=`zenity --list --radiolist --column "" --column "" $SELECTIONS --hide-header --text="$TEXT" --title="$TITLE"`
        IDS_LB_PROCS="$21" #@!~
        if [ "$IDS_LB_PROCS" = "" ]; then
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
                exit
        fi
        IDS_LB_PROCS_CONFIRM="- Run $IDS_LB_PROCS load-balanced IDS engine processes per interface.\n"
    fi

    # Bro
    ANSWER="$22" #@!~
#    TEXT="Bro listens on the chosen interfaces and writes protocol logs.\n\
#\n\
#Would you like to enable Bro?"
#    YES="Yes, enable Bro!"
#    NO="No, disable Bro."
#    zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
#    ANSWER="$?"
    if [ $ANSWER -eq 1 ]; then
            [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
        BRO_ENABLED="no"
        HTTP_AGENT_ENABLED="no"
    else
            [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
    fi

    # Bro file extraction
    if [ "$BRO_ENABLED" == "yes" ]; then
        ANSWER="$23" #@!~
#        TEXT="Bro can extract files (EXEs by default) from your network traffic.\n\nIf enabled, EXEs will be stored in /nsm/bro/extracted/.\n\nWould you like to enable file extraction?"
#        YES="Yes, enable file extraction!"
#        NO="No, disable file extraction."
#        zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
#        ANSWER="$?"
        if [ $ANSWER -eq 1 ]; then
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
            EXTRACT_FILES="no"
        else
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
            EXTRACT_FILES="yes"
        fi
    fi

    # BRO_LB_PROCS
    if [ "$BRO_ENABLED" == "yes" ] && [ "$CORES" -gt 1 ]; then
        BRO_LB_PROCS="$24" #@!~
#        TEXT="How many Bro processes would you like to run?\n\
#\n\
#This is limited by the total number of CPU cores on your system,\n\
#but you should probably choose no more than HALF your number of CPU cores.\n\
#\n\
#If you need to change this setting later, you can change the lb_procs variable in /opt/bro/etc/node.cfg."
#        BRO_LB_PROCS=`zenity --list --radiolist --column "" --column "" $SELECTIONS --hide-header --text="$TEXT" --title="$TITLE"`
        if [ "$BRO_LB_PROCS" = "" ]; then
            [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Cancel.  Exiting."
            exit
        fi
        BRO_LB_PROCS_CONFIRM="- Run $BRO_LB_PROCS load-balanced Bro processes per interface.\n"
    fi

    # http_agent
    # disbaled
    HTTP_AGENT_ENABLED="no"
    # Argus
    ARGUS_ENABLED="no"
    # Prads
        PRADS_ENABLED="no"
        PADS_AGENT_ENABLED="no"
        SANCP_AGENT_ENABLED="no"


    # PCAP
    ANSWER="$25" #@!~
#    TEXT="Full packet capture writes all monitored traffic to disk.\n\
#\n\
#Full packet capture requires lots of disk space,\n\
#but gives you lots of forensic capabilities\n\
#and is therefore highly recommended!\n\
#\n\
#Would you like to enable full packet capture?"
#    YES="Yes, enable full packet capture!"
#    NO="No, disable full packet capture."
#    zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
#    ANSWER="$?"
    if [ $ANSWER -eq 1 ]; then
            [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
        PCAP_ENABLED="no"
        PCAP_AGENT_ENABLED="no"
    else
            [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
    fi

    # Ask for PCAP_SIZE
    if [ "$PCAP_ENABLED" == "yes" ]; then

        # Ask for PCAP_SIZE
        PCAP_SIZE_CONFIRMED="no"
        PCAP_SIZE="$26" #@!~
#        while [ $PCAP_SIZE_CONFIRMED = "no" ]; do
#            PCAP_SIZE=`zenity --entry --title "$TITLE" --text="How big do you want your pcap files to be?\n\nPlease enter an integer in Megabytes (MB).  The default is 150 MB." --entry-text=150`
#            [ x$PCAP_SIZE = "x" ] && exit
#            COMPRESSED="$(echo $PCAP_SIZE | sed -e 's/[^[:digit:]]//g')"
#            if [ "$COMPRESSED" != "$PCAP_SIZE" ]; then
#                zenity --error --text "Invalid MB Value! Please use integers only."
#            else
#                PCAP_SIZE_CONFIRMED="yes"
#            fi
#        done

        # Ask about MMAP
        ANSWER="$27" #@!~
#        TEXT="netsniff-ng defaults to using scatter/gather pcap file I/O.\n\
#\n\
#For higher performance, you can enable mmap I/O, but this requires more RAM.\n\
#\n\
#Would you like to enable mmap I/O?"
#        YES="Yes, enable mmap I/O!"
#        NO="No, use default scatter/gather I/O."
#        zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
#        ANSWER="$?"
        if [ $ANSWER -eq 1 ]; then
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No."
        else
                [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes."
            PCAP_OPTIONS="--mmap"
        fi

        # Ask for PCAP_RING_SIZE
        PCAP_RING_SIZE_CONFIRMED="no"
        PCAP_RING_SIZE="$28" #@!~
#        while  [ $PCAP_RING_SIZE_CONFIRMED = "no" ]; do
#            PCAP_RING_SIZE=`zenity --entry --title "$TITLE" --text="How large do you want your PCAP ring buffer?\n\nEach monitoring interface will have the specified amount allocated from RAM\nso be sure your system has enough memory. In the case of 4 sensor interfaces\nand a specified ring buffer of 1GB, 4GB of total RAM will be allocated for packet\nbuffering. For busy networks a ring buffer of at least 256MB is recommended.\n\nPlease enter an integer in Megabytes (MB). The default is 64 MB." --entry-text=64`
#            [ x$PCAP_RING_SIZE = "x" ] && exit
#            COMPRESSED="$(echo $PCAP_RING_SIZE | sed -e 's/[^[:digit:]]//g')"
#            if [ "$COMPRESSED" != "$PCAP_RING_SIZE" ]; then
#                zenity --error --text "Invalid MB Value! Please use integers only."
#            else
#                PCAP_RING_SIZE_CONFIRMED="yes"
#            fi
#        done
    fi

    # Ask for CRIT_DISK_USAGE
    CRIT_DISK_USAGE_CONFIRMED="no"
    CRIT_DISK_USAGE="$29" #@!~
#    while [ $CRIT_DISK_USAGE_CONFIRMED = "no" ]; do
#        CRIT_DISK_USAGE=`zenity --entry --title "$TITLE" --text="At what percent of disk usage would you like to begin purging old logs?\n\nPlease enter an integer between 10 and 100.  The default is 90." --entry-text=90`
#        [ x$CRIT_DISK_USAGE = "x" ] && exit
#        COMPRESSED="$(echo $CRIT_DISK_USAGE | sed -e 's/[^[:digit:]]//g')"
#        [ "$COMPRESSED" == "$CRIT_DISK_USAGE" ] &&
#        [ $CRIT_DISK_USAGE -gt 10 ] &&
#        [ $CRIT_DISK_USAGE -lt 100 ] &&
#        CRIT_DISK_USAGE_CONFIRMED="yes" ||
#        zenity --error --text "Invalid percentage! Please use integers between 0 and 100."
#    done
    let WARN_DISK_USAGE=${CRIT_DISK_USAGE}-10

    # End of ADVANCED SETUP - SENSOR
fi

#########################################
# Ask whether or not to use SALT
#########################################
# Check to see if the securityonion-onionsalt package is installed
if [ $ADVANCED_SETUP -eq 1 ] && [ $ES_NODE -eq 0 ]  && dpkg -l |grep "securityonion-onionsalt" |grep "ii" >/dev/null; then
#TEXT="Salt can be enabled to help manage your entire sensor deployment.\n\
#\n\
#By default, Salt will automatically keep the following updated:\n\
#* OS user accounts\n\
#* SSH keys for those user accounts\n\
#* IDS rulesets\n\
#\n\
#Salt can also be used for remote execution, so you can run a command\n\
#and have it execute on all sensors across your deployment.\n\
#\n\
#Would you like to enable Salt?"
#    YES="Yes, enable Salt!"
#    NO="No, disable Salt"
#    zenity --question --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO" --no-wrap
#    ANSWER="$?"
    ANSWER="$30" #@!~
    if [ $ANSWER -eq 0 ]; then
            [ $DEBUG -eq 1 ] && echo "DEBUG: Enable ELSA."
            SALT="YES"
    else
            [ $DEBUG -eq 1 ] && echo "DEBUG: Disable ELSA."
            SALT="NO"
    fi
fi

# End of ADVANCED SETUP

#########################################
# Ask whether or not to use ELSA
#########################################
ELSA="NO"


# Set ELSA_ACTION_CONFIRM and ask about updating ELSA server if applicable
if [ "$ELSA" = "NO" ]; then
    ELSA_ACTION_CONFIRM="- Disable ELSA."
fi
if [ $ADVANCED_SETUP -eq 1 ] && [ $SENSOR -eq 1 ] && [ $SERVER -eq 0 ]; then
        # LOGSTASH
        # LOGSTASH
        LOGSTASH_REDIS="no";
        if [ $LOGSTASH_SERVER = "yes" ]; then
        LOGSTASH_REDIS_PORT_TEMP="$31" #@!~
        LOGSTASH_REDIS_PORT="$31" #@!~
        LOGSTASH_REDIS="yes"
        LOGSTASH_REDIS_CONFIRM="- Port for receiving logs to Redis: $LOGSTASH_REDIS_PORT\n";
#        while [ $LOGSTASH_REDIS = "no" ]; do
#                LOGSTASH_REDIS_PORT_TEMP=`zenity --entry --title "$TITLE" --text="Please specificity on which port sensor should sent logs stream to Server - should be the same as it was set on server.\n\n The default is 5043 tcp port." --entry-text=5043`
#                echo $LOGSTASH_REDIS_PORT_TEMP > /tmp/test1
#                [ x$LOGSTASH_REDIS_PORT_TEMP = "x" ] && exit
#                LOGSTASH_REDIS_PORT="$(echo $LOGSTASH_REDIS_PORT_TEMP | sed -e 's/^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$//g')"
#                if [ "$LOGSTASH_REDIS_PORT" != "$LOGSTASH_REDIS_PORT_TEMP" ]; then
#                        zenity --error --text "Invalid value! Please use range: 1-65535 only."
#                else
#                        LOGSTASH_REDIS="yes"
#                        LOGSTASH_REDIS_CONFIRM="- Port for receiving logs to Redis: $LOGSTASH_REDIS_PORT\n";
#                fi
#        done
        fi

fi
#########################################
# Confirm all choices before proceeding
#########################################
# Last chance!
#if [ $ES_NODE -eq 0 ]; then
#TEXT="We're about to do the following:\n\
#- Set the OS timezone to UTC. \n\
#- Delete any existing NSM data/configuration. \n\
#$SERVER_CONFIRM\
#$SERVER_USER_CONFIRM\
#$SNORBY_USER_CONFIRM\
#$LOGSTASH_REDIS_CONFIRM\
#$ELASTICSEARCH_IP_CONFIRM\
#$SENSOR_CONFIRM_1\
#$SENSOR_CONFIRM_2\
#$SENSOR_CONFIRM_3\
#$IDS_LB_PROCS_CONFIRM\
#$BRO_LB_PROCS_CONFIRM\
#$IDS_RULESET_ACTION\
#$ES_NODE_CONFIRM\
#\n\
#We're about to make changes to your system!\n\
#\n\
#Would you like to continue?"
#elif [ $ES_NODE -eq 1 ]; then
#TEXT="We're about to do the following:\n\
#- Set the OS timezone to UTC. \n\
#- Delete any existing NSM data/configuration. \n\
#$ES_NODE_CONFIRM\
#\n\
#We're about to make changes to your system!\n\
#\n\
#Would you like to continue?"
#
#fi
#YES="Yes, proceed with the changes!"
#NO="No, do not make changes!"
#zenity --question --no-wrap --title="$TITLE" --text="$TEXT" --ok-label="$YES" --cancel-label="$NO"
#ANSWER="$?"
ANSWER="$32/$33" #@!~ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
if [ $ANSWER -eq 1 ]; then
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked No. Do not proceed."
        exit
else
        [ $DEBUG -eq 1 ] && echo "DEBUG: Clicked Yes to proceed with all changes."
fi

#########################################
# BEGIN Zenity Progress window
# http://library.gnome.org/users/zenity/stable/zenity-progress-options.html.en
#########################################
# progress start (
rm -f /tmp/tester
#########################################
# Remove any tmp files from previous run
#########################################
rm -f /tmp/GeoIP.dat
rm -f /tmp/GeoLiteCity.dat
rm -f /tmp/GeoLiteCity.dat.gz

#########################################
# Create files/dirs as necessary
#########################################
touch $LOG
touch $SENSORTAB
mkdir -p /var/log/nsm/

#########################################
# Set OS timezone to UTC
#########################################
echo "3"
echo "# Please wait while setting OS timezone to UTC..." | tee -a $LOG
echo "Etc/UTC" > /etc/timezone
dpkg-reconfigure --frontend noninteractive tzdata >> $LOG 2>&1
date >> $LOG 2>&1

if pgrep rsyslog>/dev/null; then
    echo "4"
    echo "# Please wait while restarting rsyslog..." | tee -a $LOG
    service rsyslog restart >> $LOG 2>&1
fi

echo "5"
echo "# Please wait while setting OSSEC timezone to UTC..." | tee -a $LOG
cp /etc/localtime /var/ossec/etc/localtime
chown root:ossec /var/ossec/etc/localtime

# If user enabled ELSA, configure OSSEC to send alerts to local syslog
if [ "$ELSA" = "YES" ]; then
grep "syslog_output" /var/ossec/etc/ossec.conf >/dev/null || sed -i 's|  <rules>|  <syslog_output>\
      <server>127.0.0.1</server>\
  </syslog_output>\
\
  <rules>|g' /var/ossec/etc/ossec.conf
/var/ossec/bin/ossec-control enable client-syslog
fi

echo "7"
echo "# Please wait while restarting OSSEC..." | tee -a $LOG
service ossec-hids-server restart >> $LOG 2>&1

#########################################
# Stop all Sguil services and delete config
#########################################
echo "10"
echo "# Please wait while stopping all NSM services..." | tee -a $LOG
service nsm stop >> $LOG 2>&1
/opt/bro/bin/broctl stop >> $LOG 2>&1
# terminate any extra processes
pkill suricata
pkill snort
# Delete all nsm configuration (make sure MySQL is running so the DB gets deleted)
[ $SERVER -eq 1 ] && service mysql start >> $LOG 2>&1
/usr/sbin/nsm_all_del_quick >> $LOG 2>&1


#########################################
# MySQL tuning
#########################################
# IF ES_NODE skip
if [ $ES_NODE -eq 0 ]; then

# Make changes in /etc/mysql/conf.d/
mkdir -p /etc/mysql/conf.d/

# https://code.google.com/p/security-onion/issues/detail?id=416
# sguild may try to open lots of files
# (especially if you are sending prads session data into the sancp table)
# so increase open_files_limit on master server
if [ $SERVER -eq 1 ]; then
    cat << EOF > /etc/mysql/conf.d/securityonion-sguild.cnf
[mysqld]
open_files_limit = 90000
EOF
fi

# https://code.google.com/p/security-onion/issues/detail?id=388
# http://stackoverflow.com/questions/3456159/how-to-shrink-purge-ibdata1-file-in-mysql
cat << EOF > /etc/mysql/conf.d/securityonion-ibdata1.cnf
[mysqld]
innodb_file_per_table
EOF

# Restart mysql to make changes take effect
pgrep -lf mysqld >/dev/null && reload mysql >> $LOG 2>&1
fi
#########################################
# LOGSTASH
#########################################

# if its standalone we need to change logstash conf - event will be colected from files
if [ $SERVER -eq 1 ] && [ $SENSOR -eq 1 ]; then
    echo "$LOGSTASH_REDIS_PORT" >> $LOG 2>&1
    if [ ! -f /etc/logstash/conf.d/logstash.conf ]; then
        echo "Copy logstash.conf for standalone" >> $LOG 2>&1
        cp /etc/nsm/templates/logstash/logstash-quick.conf $LOGSTASH_CONF_PATH/$LOGSTASH_CONF_FILE;
        update-rc.d logstash defaults 97 10
    fi
elif [ $SERVER -eq 1 ] && [ $SENSOR -eq 0 ]; then
        echo "$LOGSTASH_REDIS_PORT" >> $LOG 2>&1
        if [ ! -f /etc/logstash/conf.d/logstash.conf ]; then
                echo "Copy logstash conf for server only setup" >> $LOG 2>&1
                cp /etc/nsm/templates/logstash/logstash.conf $LOGSTASH_CONF_PATH/$LOGSTASH_CONF_FILE;
                echo "Chaneging logstash conf" >> $LOG 2>&1
                sed -i s"|port => \"REDIS_PORT\"|port => \"$LOGSTASH_REDIS_PORT\"|"g $LOGSTASH_CONF_PATH/$LOGSTASH_CONF_FILE
        sed -i s"|host => \"ES_HOST\"|host => \"$IP_MGMT\"|"g $LOGSTASH_CONF_PATH/$LOGSTASH_CONF_FILE
                update-rc.d logstash defaults 97 10
        fi

fi

if [ $SERVER -eq 1 ] && [ $SENSOR -eq 0 ]; then
########################################
# REDIS
########################################
cp /etc/nsm/templates/redis/$REDIS_CONF_FILE $REDIS_CONF_PATH >> $LOG 2>&1
cp /etc/nsm/templates/init.d/$REDIS_START_FILE /etc/init.d/ >> $LOG 2>&1
cp /etc/nsm/templates/init/$REDIS_UPSTART_CONF_FILE /etc/init >> $LOG 2>&1
update-rc.d redis-server defaults 93 10
fi

if [ $SERVER -eq 1 ]; then

#########################################
# ELASTICSEARCH MASTER
#########################################
EL_HOSTNAME=`hostname`
cp -f /etc/nsm/templates/elasticsearch/$ELASTICSEARCH_CONF_FILE $ELASTICSEARCH_CONF_PATH;
echo "Elsticsearch master configuration file settings: $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE " >> $LOG 2>&1
if [ -f $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE ]; then
    echo "Chaneging elasticsearch conf" >> $LOG 2>&1
    sed -i s"|#cluster.name: elasticsearch|cluster.name: elasticsearch-cyberdefence|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE  >> $LOG 2>&1
    sed -i s"|#node.name: \"Franz Kafka\"|node.name: $EL_HOSTNAME|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE  >> $LOG 2>&1
    sed -i s"|#node.master: true|node.master: true|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE  >> $LOG 2>&1
    sed -i s"|#node.data: true|node.data: true|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE  >> $LOG 2>&1
    sed -i s"|#path.data: /path/to/data1,/path/to/data2|path.data: /nsm/elasticsearch/data|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE  >> $LOG 2>&1
    sed -i s"|#path.work: /path/to/work|path.work: /nsm/elasticsearch/work|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE  >> $LOG 2>&1
        # changing deafult setting - in separate file
        sed  -i s"|#ES_HEAP_SIZE=2g|ES_HEAP_SIZE=$ES_MEMORY"g"|" $ELASTICSEARCH_DEFAULT_CONF_PATH/$ELASTICSEARCH_DEFAULT_CONF_FILE
        sed  -i s"|#MAX_LOCKED_MEMORY=unlimited|MAX_LOCKED_MEMORY=unlimited|" $ELASTICSEARCH_DEFAULT_CONF_PATH/$ELASTICSEARCH_DEFAULT_CONF_FILE

    # if this is standalone server & sensor bind to localhost
    if [ $SENSOR -eq 1 ]; then
        sed -i s"|#network.host: 192.168.0.1|network.host: 127.0.0.1|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE  >> $LOG 2>&1
    else
        sed -i s"|#network.host: 192.168.0.1|network.host: $IP_MGMT|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE  >> $LOG 2>&1
    fi
    update-rc.d elasticsearch defaults 95 10
fi
#########################################
# DESKTOP - BRO and Suricata dashboards
#########################################
find /home/ -maxdepth 1 -mindepth 1 -exec cp /etc/nsm/templates/Desktop/* {} \;

#########################################
# KIBANA
#########################################
echo "Kibana deployment: " >> $LOG 2>&1
cp /etc/apache2/mods-available/headers.load /etc/apache2/mods-enabled/ >> $LOG 2>&1
cp /etc/apache2/mods-available/proxy.conf /etc/apache2/mods-enabled/ >> $LOG 2>&1
cp /etc/apache2/mods-available/proxy_http.load /etc/apache2/mods-enabled/ >> $LOG 2>&1
cp /etc/apache2/mods-available/proxy.load /etc/apache2/mods-enabled/ >> $LOG 2>&1
mkdir -p /opt/kibana/public >> $LOG 2>&1
cp -r /etc/nsm/templates/kibana-3.1.0 /opt/kibana/public >> $LOG 2>&1
cp /etc/nsm/templates/kibana /etc/apache2/sites-enabled/  >> $LOG 2>&1

# change proxy port
if ! [ $SENSOR -eq 1 ]; then
sed -i s"|127.0.0.1:9200|$IP_MGMT:9200|"g /etc/apache2/sites-enabled/kibana >> $LOG 2>&1
fi
fi

if [ $ES_NODE -eq 1 ]; then
#########################################
# ELASTICSEARCH NODE
#########################################
EL_HOSTNAME=`hostname`
cp -f /etc/nsm/templates/elasticsearch/$ELASTICSEARCH_NODE_CONF_FILE $ELASTICSEARCH_CONF_PATH
cp -f /etc/nsm/templates/elasticsearch/elasticsearch-node-settings $ELASTICSEARCH_DEFAULT_CONF_PATH/$ELASTICSEARCH_DEFAULT_CONF_FILE

echo "Elasticsearch node - default changes" >> $LOG 2>&1
if [ -f $ELASTICSEARCH_DEFAULT_CONF_PATH/$ELASTICSEARCH_DEFAULT_CONF_FILE ]; then
    sed  -i s"|#ES_HEAP_SIZE=2g|ES_HEAP_SIZE=$ES_MEMORY"g"|" $ELASTICSEARCH_DEFAULT_CONF_PATH/$ELASTICSEARCH_DEFAULT_CONF_FILE
    sed  -i s"|#MAX_LOCKED_MEMORY=unlimited|MAX_LOCKED_MEMORY=unlimited|" $ELASTICSEARCH_DEFAULT_CONF_PATH/$ELASTICSEARCH_DEFAULT_CONF_FILE
    sed  -i s"|#CONF_FILE=/etc/elasticsearch/elasticsearch.yml|CONF_FILE=/etc/elasticsearch/elasticsearch-node.yml|" $ELASTICSEARCH_DEFAULT_CONF_PATH/$ELASTICSEARCH_DEFAULT_CONF_FILE

fi

echo "Elsticsearch node configuration file changes: $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_CONF_FILE " >> $LOG 2>&1
if [ -f $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE ]; then
        echo "Chaneging elasticsearch node conf" >> $LOG 2>&1
        sed -i s"|#cluster.name: elasticsearch|cluster.name: elasticsearch-cyberdefence|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE  >> $LOG 2>&1
        sed -i s"|#node.name: \"Franz Kafka\"|node.name: "$EL_HOSTNAME"|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE  >> $LOG 2>&1
        sed -i s"|#node.master: true|node.master: false|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE  >> $LOG 2>&1
        sed -i s"|#node.data: true|node.data: true|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE  >> $LOG 2>&1
        sed -i s"|#path.data: /path/to/data1,/path/to/data2|path.data: /nsm/elasticsearch/data|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE  >> $LOG 2>&1
        sed -i s"|#path.work: /path/to/work|path.work: /nsm/elasticsearch/work|" $ELASTICSEARCH_NODE_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE  >> $LOG 2>&1
        sed -i s"|#bootstrap.mlockall: true|bootstrap.mlockall: true|" $ELASTICSEARCH_NODE_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE  >> $LOG 2>&1
        sed -i s"|#network.host: 192.168.0.1|network.host: $IP_MGMT|" $ELASTICSEARCH_CONF_PATH/$ELASTICSEARCH_NODE_CONF_FILE  >> $LOG 2>&1
        update-rc.d elasticsearch defaults 95 10
fi
fi

#########################################
# PF_RING
#########################################
rmmod pf_ring
echo "options pf_ring transparent_mode=0 min_num_slots=$PF_RING_SLOTS" > /etc/modprobe.d/pf_ring.conf

#########################################
# Firewall
# When enabling ufw over SSH, it says it might disrupt the SSH
# connection and asks for confirmation, so we put in the "allow 22" first,
# then echo "y" into the "ufw enable", and hope for the best!
#########################################
# Open port 22 for remote administration
ufw allow 22/tcp >> $LOG 2>&1
# Open port 514 (tcp and udp) for syslog
ufw allow 514 >> $LOG 2>&1
# Open port 1514/udp for OSSEC agents
ufw allow 1514/udp >> $LOG 2>&1
# Open port for logstash
ufw allow $LOGSTASH_REDIS_PORT/tcp >> $LOG 2>&1
# XRDP
ufw allow 3389/tcp >> $LOG 2>&1
# ES
ufw allow 9300/tcp >> $LOG 2>&1
ufw allow 9200/tcp >> $LOG 2>&1
# ES cluster
ufw allow from any to 224.2.2.4 port 54328 proto udp

# Enable ufw if not already enabled
echo "y" | ufw enable >> $LOG 2>&1

#########################################
# HIDS Sensor
#########################################
if [ $ES_NODE -eq 0 ]; then
SENSORNAME="$HOSTNAME-ossec"
sed -i "s|^set HOSTNAME.*$|set HOSTNAME $SENSORNAME|g" /etc/nsm/ossec/ossec_agent.conf
sed -i "s|^set NET_GROUP.*$|set NET_GROUP $SENSORNAME|g" /etc/nsm/ossec/ossec_agent.conf
sed -i "s|^set SERVER_HOST.*$|set SERVER_HOST $SERVERNAME|g" /etc/nsm/ossec/ossec_agent.conf
pkill -f ossec_agent
fi

#########################################
# Add the Sguil server if necessary
#########################################
if [ $SERVER -eq 1 ]; then
# If this box was previously a slave, we need to remove securityonion_ssh.conf
rm -f /root/.ssh/securityonion_ssh.conf
echo "20"
echo "# Please wait while creating the Sguil server..." | tee -a $LOG
/usr/sbin/nsm_server_add --server-name="$SGUIL_SERVER_NAME" --server-sensor-name=NULL --server-sensor-port=7736 --server-client-port=7734 --server-client-user="$SGUIL_CLIENT_USERNAME" --server-client-pass="$SGUIL_CLIENT_PASSWORD_1" --server-auto=yes --force-yes >> $LOG 2>&1

# MOVED TO /usr/sbin/nsm_server_add
# Create /etc/sguild symlink - http://securityonion.blogspot.com/2011/11/security-onion-20111130-now-available.html
#if [ ! -e /etc/sguild ]; then
#   ln -f -s /etc/nsm/"$SGUIL_SERVER_NAME"/ /etc/sguild
#fi
# We keep all our rules in /etc/nsm/rules, so symlink all other rules locations to here
#rm -rf /nsm/server_data/"$SGUIL_SERVER_NAME"/rules/default >> $LOG 2>&1
#ln -s /etc/nsm/rules /nsm/server_data/"$SGUIL_SERVER_NAME"/rules/default >> $LOG 2>&1
# Sensors will try to scp bpf.conf and threshold.conf from master, so let's create them if they don't already exist
#if [ ! -f /etc/nsm/rules/bpf.conf ]; then touch /etc/nsm/rules/bpf.conf; fi
#if [ ! -f /etc/nsm/rules/threshold.conf ]; then cp /etc/nsm/templates/snort/threshold.conf /etc/nsm/rules/; fi

# MOVED TO /usr/lib/nsmnow/lib-nsm-server-utils
#cat /var/www/squert/.scripts/squert.sql | mysql -uroot -U securityonion_db  >> $LOG 2>&1
#mysql -N -B --user=root -e "GRANT SELECT ON securityonion_db.* TO 'readonly'@'localhost' IDENTIFIED BY 'securityonion';" >> $LOG 2>&1
#mysql -N -B --user=root -e "GRANT ALL PRIVILEGES ON securityonion_db.mappings TO 'readonly'@'localhost' IDENTIFIED BY 'securityonion';" >> $LOG 2>&1
#mysql -N -B --user=root -e "GRANT ALL PRIVILEGES ON securityonion_db.ip2c TO 'readonly'@'localhost';" >> $LOG 2>&1
#mysql -N -B --user=root -e "GRANT FILE ON *.* TO 'readonly'@'localhost';" >> $LOG 2>&1
#mysql -N -B --user=root -e "GRANT INSERT,UPDATE,DELETE ON securityonion_db.filters TO 'readonly'@'localhost';" >> $LOG 2>&1
#mysql -N -B --user=root -e "CREATE INDEX comment ON securityonion_db.history (comment(50));" >> $LOG 2>&1
#mysql -N -B --user=root -e "CREATE INDEX sid ON securityonion_db.history (sid);" >> $LOG 2>&1
#mysql -N -B --user=root -e "CREATE INDEX cid ON securityonion_db.history (cid);" >> $LOG 2>&1
#mysql -N -B --user=root -e "GRANT DELETE on securityonion_db.history to 'readonly'@'localhost';" >> $LOG 2>&1
#mysql -N -B --user=root -e "GRANT UPDATE on securityonion_db.user_info TO 'readonly'@'localhost';" >> $LOG 2>&1

echo "25"
echo "# Please wait while configuring firewall..." | tee -a $LOG
# Open port 443 for https web interface
ufw allow 443/tcp >> $LOG 2>&1
# Open port 444 for Snorby web interface
ufw allow 444/tcp >> $LOG 2>&1
# Open port 7734 for Sguil clients
ufw allow 7734/tcp >> $LOG 2>&1
# Open port 7736 for Sguil sensors
ufw allow 7736/tcp >> $LOG 2>&1
# Open port for logstash
ufw allow $LOGSTASH_REDIS_PORT/tcp >> $LOG 2>&1
# XRDP
ufw allow 3389/tcp >> $LOG 2>&1

fi

#########################################
# Sguil Sensor(s) if necessary
#########################################
if [ $SENSOR -eq 1 ]; then
echo "47"
echo "# Please wait while creating Sguil sensor(s)..." | tee -a $LOG
BY2PORT=8000
HOSTNAME=`hostname`

# Configure SSH Key authentication to server if necessary
if [ "$SERVERNAME" != "localhost" ] && [ $ES_NODE -eq 0 ]; then
    SSH_DIR="/root/.ssh"
    SSH_CONF="$SSH_DIR/securityonion_ssh.conf"
    mkdir -p $SSH_DIR
    KEY="$SSH_DIR/securityonion"
    [ -f "$KEY" ] && mv $KEY $KEY.old
        ssh-keygen -f "$KEY" -N '' >> $LOG 2>&1
        chmod 600 "$KEY"*
        xfce4-terminal -x ssh-copy-id -i "$KEY".pub $SSH_USERNAME@$SERVERNAME
    # Backup existing files
    mkdir -p /etc/nsm/rules/backup/
    cp /etc/nsm/rules/downloaded.rules /etc/nsm/rules/backup/downloaded.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
    cp /etc/nsm/rules/local.rules /etc/nsm/rules/backup/local.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
    cp /etc/nsm/rules/so_rules.rules /etc/nsm/rules/backup/so_rules.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
    cp /etc/nsm/rules/sid-msg.map /etc/nsm/rules/backup/sid-msg.map.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
    cp /etc/nsm/rules/threshold.conf /etc/nsm/rules/backup/threshold.conf.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
    cp /etc/nsm/rules/bpf.conf /etc/nsm/rules/backup/bpf.conf.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
    # Copy files from server
    scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/downloaded.rules /etc/nsm/rules/downloaded.rules >> $LOG 2>&1
    scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/local.rules /etc/nsm/rules/local.rules >> $LOG 2>&1
    scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/so_rules.rules /etc/nsm/rules/so_rules.rules >> $LOG 2>&1
    scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/sid-msg.map /etc/nsm/rules/sid-msg.map >> $LOG 2>&1
    scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/threshold.conf /etc/nsm/rules/threshold.conf >> $LOG 2>&1
    scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/bpf.conf /etc/nsm/rules/bpf.conf >> $LOG 2>&1
    # Set IDS_ENGINE variable
    # we were doing this:
    # IDS_ENGINE=`ssh -i "$KEY" -t $SSH_USERNAME@$SERVERNAME grep ENGINE /etc/nsm/securityonion.conf 2>/dev/null | cut -d\= -f2` >> $LOG 2>&1
    # but it resulted in a ^M at the end of IDS_ENGINE
    scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/securityonion.conf /tmp/securityonion.conf >> $LOG 2>&1
    IDS_ENGINE=`grep ENGINE /tmp/securityonion.conf 2>/dev/null | cut -d\= -f2`
    rm -f /tmp/securityonion.conf
    # Save configuration
    echo "SSH_USERNAME=$SSH_USERNAME" > $SSH_CONF
    echo "SERVERNAME=$SERVERNAME" >> $SSH_CONF
# FOR INDEX NODE
#elif [ "$SERVERNAME" != "localhost" ] && [ $ES_NODE -eq 1 ]; then
#        SSH_DIR="/root/.ssh"
#        SSH_CONF="$SSH_DIR/securityonion_ssh.conf"
#        mkdir -p $SSH_DIR
#        KEY="$SSH_DIR/securityonion"
#        [ -f "$KEY" ] && mv $KEY $KEY.old
#        ssh-keygen -f "$KEY" -N '' >> $LOG 2>&1
#        chmod 600 "$KEY"*
#        xfce4-terminal -x ssh-copy-id -i "$KEY".pub $SSH_USERNAME@$SERVERNAME
#        # Backup existing files
#        mkdir -p /etc/nsm/rules/backup/
#        cp /etc/nsm/rules/downloaded.rules /etc/nsm/rules/backup/downloaded.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
#        cp /etc/nsm/rules/local.rules /etc/nsm/rules/backup/local.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
#        cp /etc/nsm/rules/so_rules.rules /etc/nsm/rules/backup/so_rules.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
#        cp /etc/nsm/rules/sid-msg.map /etc/nsm/rules/backup/sid-msg.map.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
#        cp /etc/nsm/rules/threshold.conf /etc/nsm/rules/backup/threshold.conf.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
#        cp /etc/nsm/rules/bpf.conf /etc/nsm/rules/backup/bpf.conf.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
        # Copy files from server
#        scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/downloaded.rules /etc/nsm/rules/downloaded.rules >> $LOG 2>&1
#        scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/local.rules /etc/nsm/rules/local.rules >> $LOG 2>&1
#        scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/so_rules.rules /etc/nsm/rules/so_rules.rules >> $LOG 2>&1
#        scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/sid-msg.map /etc/nsm/rules/sid-msg.map >> $LOG 2>&1
#        scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/threshold.conf /etc/nsm/rules/threshold.conf >> $LOG 2>&1
#        scp -i "$KEY" $SSH_USERNAME@$SERVERNAME:/etc/nsm/rules/bpf.conf /etc/nsm/rules/bpf.conf >> $LOG 2>&1
#        echo "SSH_USERNAME=$SSH_USERNAME" > $SSH_CONF
#        echo "SERVERNAME=$SERVERNAME" >> $SSH_CONF

fi

# NIDS sensor(s)
for INTERFACE in $INTERFACES; do
    SENSORNAME="$HOSTNAME-$INTERFACE"
    echo "# Please wait while creating Sguil sensor: $SENSORNAME..." | tee -a $LOG
        [ $DEBUG -eq 1 ] && echo "DEBUG: Adding Sensor $INTERFACE."

    # Add the sensor
        /usr/sbin/nsm_sensor_add --sensor-name="$SENSORNAME" --sensor-interface="$INTERFACE" --sensor-interface-auto=no \
                                        --sensor-server-host="$SERVERNAME" --sensor-server-port=7736 \
                                        --sensor-barnyard2-port=$BY2PORT --sensor-auto=yes --sensor-utc=yes \
                                        --sensor-vlan-tagging=no --sensor-net-group="$SENSORNAME" --force-yes >> $LOG 2>&1

    # Increment the Barnyard2 port number by 100
    let BY2PORT=BY2PORT+100

        # Copy our customized snort.conf (and associated files) into place
        cp /etc/nsm/templates/snort/attribute_table.dtd /etc/nsm/"$SENSORNAME"/ >> $LOG 2>&1
        cp /etc/nsm/templates/snort/snort.conf /etc/nsm/"$SENSORNAME"/ >> $LOG 2>&1
        cp /etc/nsm/templates/snort/unicode.map /etc/nsm/"$SENSORNAME"/ >> $LOG 2>&1
        cp /etc/nsm/templates/suricata/suricata.yaml.in /etc/nsm/"$SENSORNAME"/suricata.yaml >> $LOG 2>&1
    sed -i "s|classification-file: /etc/suricata/classification.config|classification-file: /etc/nsm/$SENSORNAME/classification.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
    sed -i "s|reference-config-file: /etc/suricata/reference.config|reference-config-file: /etc/nsm/$SENSORNAME/reference.config|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
    sed -i "s|# threshold-file: /etc/suricata/threshold.config|threshold-file: /etc/nsm/$SENSORNAME/threshold.conf|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
    sed -i "s|filename: unified2.alert|filename: snort.unified2|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
    #sed -i "s|threads: 1|threads: $IDS_LB_PROCS|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
    sed -i "s|interface: eth0|interface: $INTERFACE|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
    sed -i "s|cluster-id: 99|cluster-id: $BY2PORT|g" /etc/nsm/"$SENSORNAME"/suricata.yaml
    mkdir -p /usr/local/lib/snort_dynamicrules

    # /etc/nsm/rules/
    if [ ! -f /etc/nsm/rules/bpf.conf ]; then touch /etc/nsm/rules/bpf.conf; fi
    if [ ! -f /etc/nsm/rules/threshold.conf ]; then cp /etc/nsm/templates/snort/threshold.conf /etc/nsm/rules/; fi
    if [ ! -f /etc/nsm/rules/gen-msg.map ]; then cp /etc/nsm/templates/snort/gen-msg.map /etc/nsm/rules/; fi
    if [ ! -f /etc/nsm/rules/classification.config ]; then
        grep -h -v "^#" /etc/nsm/templates/snort/classification.config /etc/nsm/templates/suricata/classification.config |sort -u > /etc/nsm/rules/classification.config
    fi
    if [ ! -f /etc/nsm/rules/reference.config ]; then
        grep -h -v "^#" /etc/nsm/templates/snort/reference.config /etc/nsm/templates/suricata/reference.config |sort -u > /etc/nsm/rules/reference.config
    fi

        # Create symbolic links for bpf.conf, threshold.conf, sid-msg.map, gen-msg.map, classification.config, and reference.config
    for FILENAME in bpf.conf threshold.conf sid-msg.map gen-msg.map classification.config reference.config
    do
            rm -f /etc/nsm/"$SENSORNAME"/$FILENAME >> $LOG 2>&1
            ln -s /etc/nsm/rules/$FILENAME /etc/nsm/"$SENSORNAME"/$FILENAME >> $LOG 2>&1
    done

        # Create symbolic links for individual bpf-*.conf files pointing to the sensor bpf.conf (which points to the GLOBAL bpf.conf)
    cd /etc/nsm/"$SENSORNAME"
    for FILENAME in bpf-bro.conf bpf-ids.conf bpf-pcap.conf bpf-prads.conf
    do
            ln -s bpf.conf $FILENAME >> $LOG 2>&1
    done
    cd - >/dev/null

    # Add options to sensor.conf
    echo "PCAP_OPTIONS=\"$PCAP_OPTIONS\""           >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "PCAP_SIZE=${PCAP_SIZE}MiB"            >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "PCAP_RING_SIZE=${PCAP_RING_SIZE}MiB"      >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "IDS_LB_PROCS=$IDS_LB_PROCS"           >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "PCAP_ENABLED=\"$PCAP_ENABLED\""           >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "PCAP_AGENT_ENABLED=\"$PCAP_AGENT_ENABLED\""   >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "SNORT_AGENT_ENABLED=\"$SNORT_AGENT_ENABLED\"" >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "IDS_ENGINE_ENABLED=\"$IDS_ENGINE_ENABLED\""   >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "BARNYARD2_ENABLED=\"$BARNYARD2_ENABLED\""     >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "PRADS_ENABLED=\"$PRADS_ENABLED\""         >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "SANCP_AGENT_ENABLED=\"$SANCP_AGENT_ENABLED\"" >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "PADS_AGENT_ENABLED=\"$PADS_AGENT_ENABLED\""   >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "ARGUS_ENABLED=\"$ARGUS_ENABLED\""         >> /etc/nsm/"$SENSORNAME"/sensor.conf
    echo "HTTP_AGENT_ENABLED=\"$HTTP_AGENT_ENABLED\""   >> /etc/nsm/"$SENSORNAME"/sensor.conf

    # Create symbolic link for sensor rules directory on server
    if [ "$SERVERNAME" = "localhost" ]; then
            ln -s /etc/nsm/rules /nsm/server_data/"$SGUIL_SERVER_NAME"/rules/"$SENSORNAME" >> $LOG 2>&1
        for i in `seq 1 $CORES`; do ln -s /etc/nsm/rules /nsm/server_data/"$SGUIL_SERVER_NAME"/rules/"$SENSORNAME"-$i >> $LOG 2>&1; done
    else
        echo "ln -f -s /etc/nsm/rules /nsm/server_data/$SGUIL_SERVER_NAME/rules/$SENSORNAME" >> /tmp/sosetupscp
        for i in `seq 1 $CORES`; do
            echo "ln -f -s /etc/nsm/rules /nsm/server_data/$SGUIL_SERVER_NAME/rules/$SENSORNAME-$i" >> /tmp/sosetupscp
        done
    fi

        # Configure snort.conf to log statistics to /nsm/sensor_data/"$SENSORNAME"/snort.stats
        sed -i "s|# preprocessor perfmonitor: time 300 file /var/snort/snort.stats pktcnt 10000|preprocessor perfmonitor: time 300 file /nsm/sensor_data/"$SENSORNAME"/snort.stats pktcnt 10000|" /etc/nsm/"$SENSORNAME"/snort.conf >> $LOG 2>&1

    # Setup should create snort.stats to prevent Sguil errors when running Suricata
    # http://code.google.com/p/security-onion/issues/detail?id=257
    touch /nsm/sensor_data/"$SENSORNAME"/snort.stats

    # set sensor name in logstash conf for suricata - only for standalone
        if [ $SERVER -eq 1 ] && [ $SENSOR -eq 1 ]; then
                sed -i s"|SENSOR|$SENSORNAME|"g $LOGSTASH_CONF_PATH/$LOGSTASH_SENSOR_CONF_FILE >> $LOG 2>&1

        fi

    # LOGSTASH install on sensor
    if ! [ $SERVER -eq 1 ]; then
        echo "Changing logstash sensor conf - update sensorname" >> $LOG 2>&1
        # LOGSTASH REDIS ON SENSOR
        #config
        echo "/etc/nsm/templates/logstash/$LOGSTASH_SENSOR_CONF_FILE $LOGSTASH_CONF_PATH/$LOGSTASH_SENSOR_CONF_FILE" >> $LOG 2>&1
        cp /etc/nsm/templates/logstash/$LOGSTASH_SENSOR_CONF_FILE $LOGSTASH_CONF_PATH/$LOGSTASH_SENSOR_CONF_FILE >> $LOG 2>&1
        sed -i "s|port => \"REDIS_PORT\"|port => \"$LOGSTASH_REDIS_PORT\"|" $LOGSTASH_CONF_PATH/$LOGSTASH_SENSOR_CONF_FILE >> $LOG 2>&1
        sed -i "s|host => \"REDIS_HOST\"|host => \"$SERVERNAME\"|" $LOGSTASH_CONF_PATH/$LOGSTASH_SENSOR_CONF_FILE >> $LOG 2>&1
                sed -i s"|SENSOR|$SENSORNAME|"g $LOGSTASH_CONF_PATH/$LOGSTASH_SENSOR_CONF_FILE >> $LOG 2>&1
        cp /etc/nsm/templates/init.d/logstash-sensor /etc/init.d/ >> $LOG 2>&1
        update-rc.d logstash-sensor defaults 95 10
    else
        echo "Changing logstash standalone conf - update sensorname" >> $LOG 2>&1
                sed -i s"|SENSOR|$SENSORNAME|"g $LOGSTASH_CONF_PATH/$LOGSTASH_CONF_FILE >> $LOG 2>&1
    fi

done

# Bro
if grep -v "^#" $SENSORTAB > /dev/null; then
    # If user selected Quick Setup, do standalone config.
    # Otherwise, do cluster config.
    if [ $ADVANCED_SETUP -eq 0 ]; then
        # standalone config
        INTERFACE=`grep -v "^#" $SENSORTAB | awk '{print $4}'`
        cat << EOF > /opt/bro/etc/node.cfg
[bro]
type=standalone
host=localhost
interface=$INTERFACE
EOF
    else
        # User selected Advanced Setup, so do cluster config
        cat << EOF > /opt/bro/etc/node.cfg
[manager]
type=manager
host=localhost

[proxy]
type=proxy
host=localhost

EOF
                IP=`ifconfig |grep "inet addr" | awk '{print $2}' |cut -d\: -f2 |grep -v "127.0.0.1" |head -1`
                sed -i "s|host=localhost|host=$IP|g" /opt/bro/etc/node.cfg
                grep -v "^#" $SENSORTAB | awk '{print $1}' |while read SENSOR
                do
                        INTERFACE=`grep $SENSOR $SENSORTAB|awk '{print $4}'`
                        echo "* Configuring Bro to monitor $INTERFACE" >> $LOG 2>&1
                        cat << EOF >> /opt/bro/etc/node.cfg
[$SENSOR]
type=worker
host=$IP
interface=$INTERFACE
lb_method=pf_ring
lb_procs=$BRO_LB_PROCS

EOF
                done
        # Bro 2.2 should support PF_RING on multiple interfaces properly now, so comment this out.
        # If monitoring more than one interface, disable PF_RING:
        # http://securityonion.blogspot.com/2013/02/important-note-for-those-monitoring.html
        #if [ `echo $INTERFACES | wc -w` -gt 1 ]; then
        #   sed -i 's|^lb_method=pf_ring|#lb_method=pf_ring|g' /opt/bro/etc/node.cfg
        #   sed -i 's|^lb_procs|#lb_procs|g' /opt/bro/etc/node.cfg
        #fi
        fi
    # Finished with node.cfg
    # Now update networks.cfg
    if grep "172.16" /opt/bro/etc/networks.cfg >/dev/null; then
        echo "/opt/bro/etc/networks.cfg already contains 172.16" >> $LOG 2>&1
    else
        echo "172.16.0.0/12       Private IP space" >> /opt/bro/etc/networks.cfg
    fi
    # update broctl.cfg
    if grep "nsm" /opt/bro/etc/broctl.cfg >/dev/null; then
        echo "/opt/bro/etc/broctl.cfg already contains nsm" >> $LOG 2>&1
    else
        sed -i 's|SpoolDir = /var/opt/bro/spool|SpoolDir = /nsm/bro/spool|g' /opt/bro/etc/broctl.cfg
        sed -i 's|LogDir = /var/opt/bro/logs|LogDir = /nsm/bro/logs|g' /opt/bro/etc/broctl.cfg
    fi
    # Finished updating config files

    # create the /nsm/bro/ directories
    mkdir -p /nsm/bro/spool
    mkdir -p /nsm/bro/logs
    mkdir -p /nsm/bro/extracted

    # Enable Bro file extraction
    if [ "$EXTRACT_FILES" = "yes" ]; then
        sed -i 's|^#@load file-extraction|@load file-extraction|g' /opt/bro/share/bro/site/local.bro
    else
        sed -i 's|^@load file-extraction|#@load file-extraction|g' /opt/bro/share/bro/site/local.bro
    fi

    # Disabling the Bro non-root stuff for now
    #chown -R sguil:sguil /nsm/bro
    # Allow Bro to run as non-root
    #setcap cap_net_raw,cap_net_admin=eip /opt/bro/bin/bro
    #setcap cap_net_raw,cap_net_admin=eip /opt/bro/bin/capstats

    # Now tell Bro to install the new config and create the "current" symlink in /nsm/bro/logs
    /opt/bro/bin/broctl install >> $LOG 2>&1
fi

fi

#########################################
# /etc/nsm/securityonion.conf
#########################################
if [ $ES_NODE -eq 0 ]; then
echo "55"
echo "# Please wait while configuring $CONF..." | tee -a $LOG
IDS_ENGINE_LOWER=`echo ${IDS_ENGINE,,}`
echo "ENGINE=$IDS_ENGINE_LOWER"             > $CONF
echo "DAYSTOKEEP=$DAYSTOKEEP"               >> $CONF
echo "DAYSTOREPAIR=$DAYSTOREPAIR"           >> $CONF
echo "WARN_DISK_USAGE=$WARN_DISK_USAGE"         >> $CONF
echo "CRIT_DISK_USAGE=$CRIT_DISK_USAGE"         >> $CONF
echo "BRO_ENABLED=$BRO_ENABLED"             >> $CONF
echo "OSSEC_AGENT_ENABLED=$OSSEC_AGENT_ENABLED"     >> $CONF
echo "LOCAL_HIDS_RULE_TUNING=false"         >> $CONF
fi

#########################################
# Download rules using Pulledpork
#########################################
if [ "$SERVERNAME" = "localhost" ] && [ $ES_NODE -eq 0 ]; then
    echo "60"
    echo "# Please wait while configuring IDS Ruleset..." | tee -a $LOG
    # Start from a clean slate (pulledpork.conf.master)
    # Here are the rule_url directives in pulledpork.conf.master:
    # (note that the ET ruleset is uncommented and the other two are commented)
    # #rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|<oinkcode>
    # rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open
    # # THE FOLLOWING URL is for etpro downloads, note the tarball name change!
    # # and the et oinkcode requirement!
    # #rule_url=https://rules.emergingthreatspro.com/|etpro.rules.tar.gz|<et oinkcode>
    #
    cp /etc/nsm/templates/pulledpork/pulledpork.conf.master $PP_CONF >> $LOG 2>&1

    # Start with the assumption that Internet is down
    # If all necessary sites are up, then initiate PulledPork
    INTERNET="DOWN"

    case $IDS_RULESET in
    ETGPL)
        echo "Already configured for Emerging Threats GPL ruleset." >> $LOG 2>&1
        # Test Internet access
        curl -s $ET_URL && INTERNET="UP"
        ;;
    ETPRO)
        echo "Configuring for ETPRO ruleset." >> $LOG 2>&1
        # Snort is already disabled in pulledpork.conf.master
        # Disable ET.
        sed -i 's\rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\#rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\g' $PP_CONF >> $LOG 2>&1
        # Enable ETPRO.
        sed -i "s\#rule_url=https://rules.emergingthreatspro.com/|etpro.rules.tar.gz|<et oinkcode>\rule_url=https://rules.emergingthreatspro.com/|etpro.rules.tar.gz|$OINKCODE\g" $PP_CONF >> $LOG 2>&1
        # Test Internet access
        curl -s $ET_URL && INTERNET="UP"
        ;;
    VRT)
        echo "Configuring for Snort VRT ruleset only and setting a VRT policy." >> $LOG 2>&1
        # Disable ET.
        sed -i 's\rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\#rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\g' $PP_CONF >> $LOG 2>&1
        # Enable Snort.
        sed -i "s\#rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|<oinkcode>\rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|$OINKCODE\g" $PP_CONF >> $LOG 2>&1
        # Set VRT Policy.
        sed -i "s|# ips_policy=security|ips_policy=$VRT_POLICY|g" $PP_CONF >> $LOG 2>&1
        # Test Internet access
        curl -s $VRT_URL && INTERNET="UP"
        ;;
    VRTET)
        echo "Configuring for Snort VRT and Emerging Threats NoGPL rulesets" >> $LOG 2>&1
        # Enable Snort.
        sed -i "s\#rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|<oinkcode>\rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|$OINKCODE\g" $PP_CONF >> $LOG 2>&1
        # Change open to open-nogpl
        sed -i 's\rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open\rule_url=https://rules.emergingthreatspro.com/|emerging.rules.tar.gz|open-nogpl\g' $PP_CONF >> $LOG 2>&1
        # Test Internet access
        curl -s $ET_URL && curl -s $VRT_URL && INTERNET="UP"
        ;;
    esac

    if [ "$INTERNET" = "UP" ]; then
        echo "65"
        echo "# Please wait while executing PulledPork to download rules..." | tee -a $LOG
        mkdir -p /etc/nsm/rules/backup/
        cp /etc/nsm/rules/downloaded.rules /etc/nsm/rules/backup/downloaded.rules.`date +%Y%m%d%H%M%S` >> $LOG 2>&1
        mkdir -p /var/log/nsm/
        /usr/bin/pulledpork.pl -c $PP_CONF >> /var/log/nsm/pulledpork.log
        echo "LOCAL_NIDS_RULE_TUNING=false" >> $CONF
    else
        #zenity --error --text="Rule download sites appear to be down.  Skipping rule update."
        echo "LOCAL_NIDS_RULE_TUNING=true" >> $CONF
        echo "Rule download sites appear to be down.  Setting LOCAL_NIDS_RULE_TUNING to true." >> $LOG 2>&1
    fi
fi

#########################################
# Start all Sguil services
#########################################
SSH_DIR="/root/.ssh"
SSH_CONF="$SSH_DIR/securityonion_ssh.conf"
echo "70"
if [ -f $SSH_CONF ]; then
        # We are a SENSOR
    echo "# Please wait while killing existing SSH tunnel to MASTER..." | tee -a $LOG
    pkill autossh
# to avoid running it on index node
elif [ $SERVER -eq 1 ]; then
    # We are the MASTER.
    echo "# Please wait while initializing Snorby database..." | tee -a $LOG
    # Kill any existing Snorby processes.
    pkill delayed_job
    # Delete any existing Snorby data.
    if [ -d /var/lib/mysql/snorby ]; then
        mysql -e "drop database snorby" >> $LOG 2>&1
    fi
    # Set email and password
    cp /opt/snorby/db/seeds.rb.securityonion /opt/snorby/db/seeds.rb
        sed -i "s|ReplaceWithDesiredEmail|$SNORBY_EMAIL|g" /opt/snorby/db/seeds.rb
        sed -i "s|ReplaceWithDesiredPassword|$SGUIL_CLIENT_PASSWORD_1|g" /opt/snorby/db/seeds.rb
        # Set FPC options
        IP=`ifconfig |grep "inet addr" | awk '{print $2}' |cut -d\: -f2 |grep -v "127.0.0.1" |head -1`
        sed -i "s|packet_capture_url, nil|packet_capture_url, 'https://$IP/capme/'|g" /opt/snorby/db/seeds.rb
        sed -i "s|packet_capture, nil|packet_capture, 1|g" /opt/snorby/db/seeds.rb
        sed -i "s|packet_capture_auto_auth, 1|packet_capture_auto_auth, nil|g" /opt/snorby/db/seeds.rb
    # Initialize Snorby DB
    su www-data -c "cd /opt/snorby; bundle exec rake snorby:setup RAILS_ENV=production" >> $LOG 2>&1
    # Shred the Snorby password
    shred -u /opt/snorby/db/seeds.rb >> $LOG 2>&1
        # Pivot from Snorby to ELSA
        [ "$ELSA" = "YES" ] && mysql -uroot -Dsnorby -e "INSERT INTO lookups (title,value) VALUES('ELSA Search By IP Address','https://$IP:3154/?query_string=\"\${ip}\"%20groupby:program')"
fi
########################################
# STARTING SERVICES
########################################
#SENSOR
if [ $SENSOR -eq 1 ] && [ $ES_NODE -eq 0 ] && [ $SERVER -eq 0 ]; then
    echo "75"
    echo "# Please wait while starting all Cyber Defence services..." | tee -a $LOG
    start securityonion >> $LOG 2>&1
    /etc/init.d/logstash-sensor start  >> $LOG 2>&1
    sleep 10s
#STANDALONE
elif [ $SENSOR -eq 1 ] && [ $SERVER -eq 1 ]; then
    echo "# Please wait while starting standalone services..." | tee -a $LOG
    start securityonion >> $LOG 2>&1
    sleep 5
    /etc/init.d/elasticsearch start >> $LOG 2>&1
    sleep 10
    /etc/init.d/logstash start>> $LOG 2>&1
        /etc/init.d/apache2 restart >> $LOG 2>&1
#SERVER
elif [ $SENSOR -eq 0 ] && [ $SERVER -eq 1 ]; then
        echo "# Please wait while starting server services..." | tee -a $LOG
        start securityonion >> $LOG 2>&1
        sleep 5
    /etc/init.d/redis-server start >> $LOG 2>&1
    sleep 2
        /etc/init.d/elasticsearch start >> $LOG 2>&1
        sleep 10
        /etc/init.d/logstash start >> $LOG 2>&1
        /etc/init.d/apache2 restart >> $LOG 2>&1

elif [ $ES_NODE -eq 1 ]; then
    echo "# Please wait while starting all Elasticsearch node..." | tee -a $LOG
    /etc/init.d/elasticsearch start >> $LOG 2>&1
    sleep 10s
fi

#########################################
# Configure Salt
#########################################
if dpkg -l |grep "securityonion-onionsalt" |grep "ii" >/dev/null; then
    if [ "$SALT" = "NO" ]; then
        # Stop both running salt services
        service salt-master stop >> $LOG 2>&1
        service salt-minion stop >> $LOG 2>&1
        # Disable both salt services
        [ -f /etc/init/salt-master.conf ] && mv /etc/init/salt-master.conf /etc/init/salt-master.DISABLED
        [ -f /etc/init/salt-minion.conf ] && mv /etc/init/salt-minion.conf /etc/init/salt-minion.DISABLED
    else
        # Enable Salt
        # Salt uses FQDN instead of just hostname
        FQDN=`python -c 'import socket; print socket.getfqdn()'`
        if [ $SERVER -eq 1 ]; then
            # If this box is a Master Server we need to run salt-master
            # Copy template files to production location
            cp /opt/onionsalt/pillar/users/init.sls.template /opt/onionsalt/pillar/users/init.sls
            cp /opt/onionsalt/salt/top.sls.template /opt/onionsalt/salt/top.sls
            # Add backend config to salt/top.sls
            echo "   '$FQDN':"  >> /opt/onionsalt/salt/top.sls
            echo "      - backend"  >> /opt/onionsalt/salt/top.sls
            echo ""         >> /opt/onionsalt/salt/top.sls
            # If salt-master is DISABLED we need to enable it
            [ -f /etc/init/salt-master.DISABLED ] && mv /etc/init/salt-master.DISABLED /etc/init/salt-master.conf
            # Start salt-master
            service salt-master restart >> $LOG 2>&1
            ufw allow salt >> $LOG 2>&1
        else
            # If this box is not a Master we need to disable salt-master
            # Stop salt-master
            service salt-master stop >> $LOG 2>&1
            # Disable salt-master
            [ -f /etc/init/salt-master.conf ] && mv /etc/init/salt-master.conf /etc/init/salt-master.DISABLED
            # Tell the salt-master that we are a sensor
            cat << EOF >> /tmp/sosetupscp
echo "   '$FQDN':"  >> /opt/onionsalt/salt/top.sls
echo "      - sensor"   >> /opt/onionsalt/salt/top.sls
echo ""         >> /opt/onionsalt/salt/top.sls
EOF
        fi

        # All boxes run salt-minion
        # Configure minion
        echo "master: $SERVERNAME" > /etc/salt/minion.d/onionsalt.conf
        # If salt-minion is DISABLED, enable it
        [ -f /etc/init/salt-minion.DISABLED ] && mv /etc/init/salt-minion.DISABLED /etc/init/salt-minion.conf
        service salt-minion restart >> $LOG 2>&1

        # Takes a few seconds for the minion to check in
        sleep 10s

        # salt-master needs to accept the key from salt-minion
        if [ "$SERVERNAME" = "localhost" ]; then
            salt-key -a $FQDN -y >> $LOG 2>&1
        else
            echo "salt-key -a $FQDN -y" >> /tmp/sosetupscp
        fi
    fi
fi


#########################################
# Send all queued commands to server
#########################################
if [ "$SERVERNAME" != "localhost" ] && [ $ES_NODE -eq 0 ]; then
        echo "95"
        echo "# Please wait while configuring server..." | tee -a $LOG
    # Copy the script over
    scp -i "$KEY" /tmp/sosetupscp $SSH_USERNAME@$SERVERNAME:/tmp/sosetupscp
    # Run the script with sudo
    xfce4-terminal -x ssh -i "$KEY" -t $SSH_USERNAME@$SERVERNAME sudo /bin/bash /tmp/sosetupscp
    # Cleanup
    rm -f /tmp/sosetupscp
    ssh -i "$KEY" -t $SSH_USERNAME@$SERVERNAME rm -f /tmp/sosetupscp >> $LOG 2>&1
fi


#########################################
# Now that the master knows about
# this minion, tell minion to update
#########################################
dpkg -l |grep "securityonion-onionsalt" |grep "ii" >/dev/null && [ "$SALT" = "YES" ] && salt-call state.highstate >> $LOG 2>&1

#########################################
# END Zenity Progress window
#########################################
# ) | zenity --progress --title="$TITLE" --text="Please wait while making changes to the system..." --percentage=0 --auto-close
# progress end

#########################################
# Move log file from /tmp/ to /var/log/nsm/
#########################################
mv $LOG /var/log/nsm/sosetup.log
LOG="/var/log/nsm/sosetup.log"

#########################################
# If this is a server, populate ip2c table
#########################################
if [ -d /var/lib/mysql/securityonion_db/ ]; then
    /usr/bin/sguild-add-user "$SGUIL_CLIENT_USERNAME" "$SGUIL_CLIENT_PASSWORD_1" >/dev/null
    cd /var/www/squert/.scripts/
    # Setup needs to delete /var/www/squert/.scripts/Ip2c/*.md5 before running ip2c.tcl
    # http://code.google.com/p/security-onion/issues/detail?id=250
    rm -f *.md5
    ./ip2c.tcl >> $LOG 2>&1 &
    cd - >/dev/null
fi

#########################################
# FIN
#########################################
#@!~ "$35"
#if [ $ES_NODE -eq 0 ]; then
#TEXT="Cyber Defence Setup is now complete! \n \
#\n \
#Setup log can be found here:\n \
#$LOG\n \
#\n \
#You may view IDS alerts using Sguil, Squert, Snorby, or Elasticsearch. \n \
#\n \
#Bro logs can be found in Elasticsearch and the following location: \n \
#/nsm/bro/"
#zenity --info --title="$TITLE" --text="$TEXT" --no-wrap
#
#
#@!~ "$36"
#if [ $ES_NODE -eq 0 ]; then
#TEXT="Rules downloaded by Pulledpork are stored in: \n \
#/etc/nsm/rules/downloaded.rules \n \
#\n \
#Local rules can be added to: \n \
#/etc/nsm/rules/local.rules \n \
#\n \
#You can have PulledPork modify the downloaded rules \n \
#by modifying the files in: \n \
#/etc/nsm/pulledpork/ \n \
#\n \
#Rules will be updated every day at 7:01 AM UTC. \n \
#You can manually update them by running: \n \
#/usr/bin/rule-update \n \
#\n \
#Sensors can be tuned by modifying the files in: \n \
#/etc/nsm/NAME-OF-SENSOR/"
#zenity --info --title="$TITLE" --text="$TEXT" --no-wrap
#elif [ $ES_NODE -eq 1 ]; then
#
#@!~ "$37"
#TEXT="Cyber Defence Setup is now complete! \n \
#\n \
#Setup log can be found here:\n \
#$LOG\n \
#\n \
#Index Node was added. You can run: \n \
#curl -XGET 'http://$IP_MGMT:9200/_cluster/health?pretty=true'\n \
#to check if node was added to cluster."
#zenity --info --title="$TITLE" --text="$TEXT" --no-wrap
#
#fi
